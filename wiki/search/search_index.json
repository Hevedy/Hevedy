{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Hevedy Docs","text":"<p>Welcome to Hevedy Docs, the central hub for all documentation related to our suite of powerful tools designed to enhance your creative workflows. Here you\u2019ll find comprehensive guides, tutorials, and references for both Purpleprint\u2014our versatile Unreal Engine plugin suite\u2014and Purple Image, an advanced standalone image editing and texture management toolkit.  </p>"},{"location":"index.html#what-youll-find-here","title":"What You\u2019ll Find Here","text":"<ul> <li> <p>Purpleprint: A collection of modular plugins built for Unreal Engine, offering utilities ranging from core math libraries to audio management, procedural asset placement, and spline-based path creation. These tools are designed to streamline level design, audio ambiance, and environment setup.  </p> </li> <li> <p>Purple Image: A robust image editing suite packed with tools for texture processing, color palette creation, batch operations, and workspace organization. Whether you\u2019re optimizing game textures or crafting color schemes, Purple Image accelerates your workflow with intuitive interfaces and automation features.  </p> </li> </ul> <p>Dive into each section for detailed information on installation, usage, and best practices, along with helpful tips to get the most out of these tools. We\u2019re committed to supporting your creative projects with reliable, efficient, and easy-to-use solutions.  </p> <p>Happy developing and designing!  </p>"},{"location":"purple-image/index.html","title":"Purple Image Documentation","text":"<p>Welcome to the official Purple Image documentation! This guide provides an overview of our powerful suite of tools designed to simplify and accelerate your workflow in image editing, texture management, and color design.</p>"},{"location":"purple-image/index.html#tools-overview","title":"Tools Overview","text":""},{"location":"purple-image/index.html#editor","title":"Editor","text":"<p>The Editor is your all-in-one workspace for combining, splitting, and editing textures in real-time. It allows you to package textures optimized for performance with a simple drag-and-drop interface. Quickly adjust colors, generate LUT tables, and share presets seamlessly to improve your game or design projects.</p>"},{"location":"purple-image/index.html#batcher","title":"Batcher","text":"<p>The Batcher automates the processing of large batches of images. It can convert entire folders, package color channels efficiently, and optimize textures to reduce load times and boost performance. This tool is essential for managing large-scale texture workflows.</p>"},{"location":"purple-image/index.html#palette","title":"Palette","text":"<p>The Palette tool enables you to pick and create custom color palettes for any project. Whether you're designing for the web, creating filters, or working on digital art, Palette helps you craft harmonious color schemes and export them to your favorite design tools.</p>"},{"location":"purple-image/index.html#board","title":"Board","text":"<p>Board acts as your virtual reference desktop. Arrange multiple images and use them as guides for drawing, painting, or designing. It's a flexible workspace that helps keep your inspirations and references visible and organized while you work.</p>"},{"location":"purple-image/batcher.html","title":"Batch Tools","text":"<p>The Batcher automates repetitive tasks for large sets of images, ensuring consistent processing and efficiency:  </p> <ul> <li> <p>Batch Combiner: Merge batches of images channel-wise, packaging textures in bulk for better performance and streamlined asset management.  </p> </li> <li> <p>Batch Editor: Apply edits across multiple images at once, such as color adjustments or compression settings.  </p> </li> <li> <p>Batch Splitter: Divide large sets of textures into individual channels in bulk, useful for workflows requiring channel-specific manipulation or optimization.  </p> </li> </ul>"},{"location":"purple-image/board.html","title":"Image Board","text":"<p>The Board acts as a flexible reference canvas to improve creative workflows:  </p> <ul> <li> <p>Image Management: Import multiple reference images to organize your visual workspace.  </p> </li> <li> <p>Basic Controls: Rotate, align, and adjust the transparency (alpha) of each image independently.  </p> </li> <li> <p>Workspace Cloud: Arrange images freely across the canvas to build a 'cloud' of references, ideal for sketching, painting, or design work where visual inspiration needs to remain accessible.  </p> </li> </ul>"},{"location":"purple-image/color-palette.html","title":"Color Palette","text":"<p>The Palette tool provides extensive color management capabilities aimed at designers and developers:  </p> <ul> <li> <p>Color Selectors: Choose colors through multiple modes including RGB, HSV, and Hex codes, suitable for web design, digital art, and game development.  </p> </li> <li> <p>Palette Export: Export your created palettes in formats compatible with popular design tools such as GIMP and Photoshop.  </p> </li> <li> <p>Drag &amp; Drop Importer: Import images by dragging and dropping them into the tool to automatically extract dominant colors or pixel-based color data.  </p> </li> <li> <p>Scriptable Color Generator: Generate colors programmatically using scripting support for multiple programming languages, enabling seamless integration into automated pipelines or procedural generation workflows.  </p> </li> </ul> <p>Work as common color selector but give you different suggestions of color with different light, intensity and shading.  You can get the RGB, sRGB value or the Hex values that can be used in the game engines color selectors, in websites or even in other image apps. Allow you to create a smaller window and overlap other apps, in this way you can use with other image tools. Can copy the values directly to the clipboard in this way you only need to paste the final value in your image tool, or select the color from your image tool in the window.</p> <p>This tool allow you too to select the color by sRGB and return the value automatic.</p>"},{"location":"purple-image/color-palette.html#color-selector","title":"Color Selector","text":"<p>Pick the colors you want, save them into a palette or automatically copy them to any other software into your clipboard.</p> <p> sadfsfsfsdfsfdsfds</p> <p></p> <p></p> <p></p> <p></p> <p>Image caption</p>"},{"location":"purple-image/color-palette.html#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"purple-image/editor.html","title":"Editor","text":"<p>The Editor is a powerful and versatile image editing workspace with multiple specialized features:  </p> <ul> <li> <p>LUT Editor: A full-featured LUT (Look-Up Table) editor with precise controls to manipulate color grading, contrast, brightness, and more. Create and export custom LUTs for game engines or other creative applications.  </p> </li> <li> <p>Channel Splitter: Extract individual color channels (e.g., Red, Green, Blue, Alpha) from your images, allowing for detailed per-channel editing.  </p> </li> <li> <p>Channel Combiner: Combine separate grayscale images representing different color channels into a single packed texture, optimizing performance and texture memory usage.  </p> </li> </ul> <p></p> <p>The packager tool can help you to combine or split images in layers saving until x2 times of memory per texture for your games.</p> <p>The tool include 5 functions combine, split, convert, package and batch.</p> <p>Note: You can combine or split a maximun of 4 layers per texture ( R G B A ).</p> <p>In difference to the common paid and free image stuites and other image tools, the LUT Editor included in the \"Purpleprint - Image Tools\" is the faster way to create LUT files or just edit the images in real-time for game engines Post-processing or video editing using a set of real-time parameter.</p> <p>This tool give you the control over all the parameters in real-time, while all the common paid tools need to bake the results of each parameter.</p> <p>You can save too the values in a file, in this way you never lost and can replicate the results in different images, just loading it.</p>"},{"location":"purple-image/editor.html#layers-combiner","title":"Layers Combiner","text":"<p>This tool can be used to combine up to 8 layers from individual images into a single image.</p> <p></p> <p>Since the version 1.5.2 comes with a Filtered &amp; Unfiltered option output.</p> <p></p>"},{"location":"purple-image/editor.html#layers-splitter","title":"Layers Splitter","text":"<p>This one works the reverse way of the prior tool, allows to split a image in different images based on it's channels.</p> <p>The UI display a maximum of 4 at time, but you can choose each one display options individually.</p> <p></p>"},{"location":"purple-image/editor.html#layers-splitter-controls","title":"Layers Splitter Controls","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"purpleprint/index.html","title":"Purpleprint Suite for Unreal Engine","text":"<p>The Purpleprint Suite is a comprehensive collection of powerful plugins designed to enhance your Unreal Engine projects with modular, flexible tools.</p>"},{"location":"purpleprint/index.html#purpleprint-core","title":"Purpleprint Core","text":"<p>At the heart of the suite is Purpleprint Core, the essential foundation plugin. It provides multiple utility libraries including math functions, randomization tools, miscellaneous helpers, and platform-specific utilities. This core plugin serves as the base dependency for all other Purpleprint tools, ensuring seamless integration and robust functionality. Explore the repository and detailed documentation here: Purpleprint Core GitHub.</p>"},{"location":"purpleprint/index.html#purpleprint-audio","title":"Purpleprint Audio","text":"<p>A streamlined audio utility plugin offering handy classes and tools for sound management. One highlight is the Audio Spline actor, designed to play audio near the player along a spline \u2014 perfect for ambient sounds like rivers or wind, controlled with just a single point.</p>"},{"location":"purpleprint/index.html#purpleprint-placer","title":"Purpleprint Placer","text":"<p>This toolset includes several powerful placement utilities: Placer Area, Placer Spline, and Placer Array. They enable the random distribution and alignment of actors, static meshes, decals, and more throughout your level. Objects can be placed on walls, floors, or any surfaces you specify, giving you complete creative control over environmental detail.</p>"},{"location":"purpleprint/index.html#purpleprint-path","title":"Purpleprint Path","text":"<p>Focused on spline-based mesh placement, Purpleprint Path is tailored for creating roads, pathways, and similar elements. It builds on the placer concept but specializes in generating smooth, spline-driven mesh arrangements, ideal for roads or any elongated structures.</p>"},{"location":"purpleprint/audio/index.html","title":"Purpleprint Audio","text":"<p>Purpleprint Audio offers audio-related tools and classes to enhance sound implementation in your projects with minimal setup.  </p>"},{"location":"purpleprint/audio/index.html#main-feature","title":"Main Feature:","text":"<ul> <li>Audio Spline Actor: An actor that plays audio near the player following a spline path. This is perfect for environmental sounds such as flowing rivers, wind, or other ambient effects that move or stretch across a level. It supports easy control using just a single point on the spline.  </li> </ul> <p>This plugin simplifies creating dynamic and immersive audio environments with minimal complexity.  </p>"},{"location":"purpleprint/bridge/index.html","title":"Purpleprint Bridge","text":"<p>Purpleprint Bridge is a Blender add-on designed to export scene object data into a format compatible with Purpleprint Placer and other Unreal Engine-based tools.</p> <p>This tool enables quick and structured transfer of level design data from Blender to Unreal Engine pipelines, making it ideal for prototyping, layout planning, and mass placement of entities in-game.  </p>"},{"location":"purpleprint/bridge/index.html#download","title":"Download:","text":"<p>Github </p>"},{"location":"purpleprint/bridge/index.html#features","title":"Features:","text":"<ul> <li>\u2705 Exports only objects marked as visible for render.</li> <li>\ud83d\udeab Ignores Empty objects, but applies their world transforms to their children.</li> <li>\ud83e\udde0 Smart grouping: all instances of the same model use the same Type name.</li> <li>\ud83c\udf10 Exports world-space transforms: Location, Rotation (in degrees), and Scale.</li> <li>\ud83d\udd01 Recursively processes object hierarchies.</li> <li>\ud83d\udcc4 Output is compatible with Unreal Engine tools, such as Purpleprint Placer.</li> </ul>"},{"location":"purpleprint/bridge/index.html#field-breakdown","title":"\ud83d\udd0d Field Breakdown:","text":"<ul> <li>Name: Blender object name.</li> <li>Type: Object type and its mesh/model name.</li> <li>Location: Global position formatted as Unreal vector.</li> <li>Rotation: Global rotation in Unreal's <code>(Pitch, Yaw, Roll)</code> format.</li> <li>Scale: Global object scale.</li> </ul>"},{"location":"purpleprint/bridge/index.html#default-export-path","title":"\ud83d\uddc2 Default Export Path","text":"<p>By default, the <code>.csv</code> file is saved to:</p> <p><code>&lt;your_blendfile_directory&gt;/purpleprint_entities.csv</code></p> <p>You can choose a custom path in the panel, and it will be saved with your <code>.blend</code> project for future use.</p>"},{"location":"purpleprint/bridge/index.html#installation","title":"\ud83e\udded Installation","text":"<ol> <li>Download <code>PurpleprintBridge.py</code>.</li> <li>Open Blender and go to <code>Edit &gt; Preferences &gt; Add-ons</code>.</li> <li>Click Install, select the Python file, and enable the addon.</li> <li>Find the Export Tools panel in the 3D Viewport Sidebar (<code>N</code> key).</li> <li>Click \"Export Purple CSV\" to generate your <code>.csv</code> file.</li> </ol>"},{"location":"purpleprint/bridge/index.html#use-case","title":"\ud83d\udee0 Use Case","text":"<p>Purpleprint Bridge is perfect for:</p> <ul> <li>Level designers using Blender as a blocking/layout tool.</li> <li>Technical artists building automated import systems in Unreal.</li> <li>Anyone needing to export world-space transform data from Blender into readable <code>.csv</code> formats for runtime placement or instancing in Unreal.</li> </ul>"},{"location":"purpleprint/bridge/index.html#compatibility","title":"\u2705 Compatibility","text":"<ul> <li>Blender 4.0 and above</li> <li>Compatible with Unreal Engine 4 &amp; 5</li> <li>Output ready for tools like Purpleprint Core &amp; Purpleprint Placer</li> </ul>"},{"location":"purpleprint/bridge/index.html#license","title":"\ud83d\udcdc License","text":"<p>This project is licensed under the GNU General Public License v3.0.</p> <p>You are free to use, modify, and redistribute this code under the terms of the GPL.</p> <p>See the full license text in the <code>LICENSE</code> file or visit: \ud83d\udc49 https://www.gnu.org/licenses/gpl-3.0.html</p>"},{"location":"purpleprint/core/index.html","title":"Purpleprint Core","text":"<p>Purpleprint Core is the foundational plugin that all other Purpleprint plugins depend on. It provides essential libraries and utilities that simplify development and improve workflow across your projects.</p>"},{"location":"purpleprint/core/index.html#key-features","title":"Key Features:","text":"<ul> <li>Math Library: Collection of useful mathematical functions and helpers to simplify complex calculations.</li> <li>Random Library: Tools for generating random values and randomization utilities to enhance procedural generation.</li> <li>Miscellaneous Utilities: Various helper functions for common tasks, designed to save time and increase productivity.</li> <li>Platform Utilities: Functions to detect and handle platform-specific behavior or differences, ensuring compatibility and optimization.</li> </ul> <p>Explore the full source code and detailed documentation here: Purpleprint Core GitHub Repository</p>"},{"location":"purpleprint/core/api/purpleprint-core-camera-tracker-editor.html","title":"PurpleprintCoreCameraTrackerEditor.h","text":""},{"location":"purpleprint/core/api/purpleprint-core-camera-tracker-editor.html#classstruct-fpurpleprintcorecameratrackereditor","title":"Class/Struct: FPurpleprintCoreCameraTrackerEditor","text":"<ul> <li>\u274c <code>static FTransform GetLastCameraTransform();</code> </li> </ul> <ul> <li>\u274c <code>static FVector GetLastCameraLocation();</code> </li> </ul> <ul> <li>\u274c <code>static FRotator GetLastCameraRotation();</code> </li> </ul> <ul> <li>\u274c <code>static void SetLastCameraLocation(const FVector&amp; NewLocation);</code> </li> </ul> <ul> <li>\u274c <code>static void SetLastCameraRotation(const FRotator&amp; NewRotation);</code> </li> </ul>"},{"location":"purpleprint/core/api/purpleprint-core-math.html","title":"PurpleprintCoreMath.h","text":""},{"location":"purpleprint/core/api/purpleprint-core-math.html#classstruct-upurpleprintcoremath-inherits-from-ublueprintfunctionlibrary","title":"Class/Struct: UPurpleprintCoreMath (inherits from UBlueprintFunctionLibrary)","text":"<ul> <li>\u2705 <code>static float Cbrt( const float Value );</code>  Slower than Log2 but more accurate 1.0 / Loge(10)= 0.4342944f Missing from C++ lib so here are, the Degress operations Returns cube root</li> </ul> <ul> <li>\u2705 <code>static float OneLimit(const float Value);</code> </li> </ul> <ul> <li>\u2705 <code>static float OneMinus(const float Value);</code> </li> </ul> <ul> <li>\u2705 <code>static int32 NegateInt(const int32 Value);</code> </li> </ul> <ul> <li>\u2705 <code>static float Negate(const float Value);</code> </li> </ul> <ul> <li>\u2705 <code>static int32 ReverseInt(const int32 Value);</code> </li> </ul> <ul> <li>\u2705 <code>static float Reverse(const float Value);</code> </li> </ul> <ul> <li>\u274c <code>static double CalculateCameraHeightForArea(double DesiredWidthUU, float VerticalFOVDegrees);</code>  #if UE_VERSION_NEWER_THAN(5, 2, 0) #endif Cannot set a check for newer versions here, UFUNCTION isn't supported inside #if verison check</li> </ul> <ul> <li>\u2705 <code>static float CalculateCameraHeightForAreaFloat(float DesiredWidthUU, float VerticalFOVDegrees);</code> </li> </ul> <ul> <li>\u2705 <code>static FTransform TransformsAddMasked(const FTransform&amp; A, const FTransform&amp; B, bool bLocation = true, bool bRotation = true, bool bScale = false, bool bReturnFirst = true);</code> </li> </ul> <ul> <li>\u2705 <code>static FTransform TransformsSubMasked(const FTransform&amp; A, const FTransform&amp; B, bool bLocation = true, bool bRotation = true, bool bScale = false, bool bReturnFirst = true);</code> </li> </ul> <ul> <li>\u2705 <code>static FTransform TransformsMulMasked(const FTransform&amp; A, const FTransform&amp; B, bool bLocation = true, bool bRotation = true, bool bScale = false, bool bbReturnFirst = true);</code> </li> </ul> <ul> <li>\u2705 <code>static FTransform TransformsCombine(const FTransform&amp; A, const FTransform&amp; B);</code> </li> </ul> <ul> <li>\u2705 <code>static FVector GetClosestPointOnSphereSurface(const FVector&amp; SphereCenter, float SphereRadius, const FVector&amp; TargetPoint);</code> </li> </ul> <ul> <li>\u2705 <code>static FVector GetClosestPointOnDomeSurface(const FVector&amp; DomeCenter, float DomeRadius, const FVector&amp; TargetPoint);</code> </li> </ul> <ul> <li>\u2705 <code>static float SpringFloat(float Current, float Target, float&amp; Velocity, float Frequency, float Damping, float DeltaTime);</code> </li> </ul> <ul> <li>\u2705 <code>static bool FLinearColorNearEqual(const FLinearColor A, const FLinearColor B, const bool bIgnoreAlpha = true);</code> </li> </ul> <ul> <li>\u2705 <code>static float BoxPerimeter(const float SizeX, const float SizeY);</code> </li> </ul> <ul> <li>\u2705 <code>static float BoxDiagonal(const float SizeX, const float SizeY);</code> </li> </ul> <ul> <li>\u2705 <code>static float BoxSide(const float Diagonal);</code> </li> </ul> <ul> <li>\u2705 <code>static float VectorDistance(const FVector A, const FVector B);</code> </li> </ul> <ul> <li>\u2705 <code>static float Distance2D(const FVector2D A, const FVector2D B);</code> </li> </ul> <ul> <li>\u2705 <code>static float GetVectorsAngleRadiants(FVector A, FVector B);</code> </li> </ul> <ul> <li>\u2705 <code>static float GetVectorsAngleDegrees(FVector A, FVector B);</code> </li> </ul> <ul> <li>\u2705 <code>static FVector GetPointOnLineAtDistance(FVector Start, FVector End, float Distance);</code> </li> </ul> <ul> <li>\u2705 <code>static float LerpLinearBounce(float Alpha);</code> </li> </ul> <ul> <li>\u2705 <code>static float LerpLinearBounceAuto(float&amp; Alpha, float Delta, float DeltaSpeed = 1.0f);</code>  Make callable because will return only once</li> </ul> <ul> <li>\u2705 <code>static int32 NormalizeInRangeRoulette(const int32 Value, const int32 Min, const int32 Max);</code>  Returns the float in range of min and max can cross up or down</li> </ul> <ul> <li>\u2705 <code>static int32 IntegerCount(const int32 IntValue, const bool Fast = true);</code>  Returns the number of characters in the int</li> </ul> <ul> <li>\u2705 <code>static int32 FloatCount(const float FloatValue, const bool Fast = true);</code>  Returns the number of characters in the float</li> </ul> <ul> <li>\u2705 <code>static int32 DecimalCount(const float FloatValue);</code>  Returns the number decimals in the float</li> </ul> <ul> <li>\u2705 <code>static uint8 BGetCloser(uint8 Ref, uint8 A, uint8 B);</code>  Returns the closer value of A and B</li> </ul> <ul> <li>\u2705 <code>static uint8 BGetFurther(uint8 Ref, uint8 A, uint8 B);</code>  Returns the further value of A and B</li> </ul> <ul> <li>\u2705 <code>static int32 IGetCloser(int32 Ref, int32 A, int32 B);</code>  Returns the closer value of A and B</li> </ul> <ul> <li>\u2705 <code>static int32 IGetFurther(int32 Ref, int32 A, int32 B);</code>  Returns the further value of A and B</li> </ul> <ul> <li>\u2705 <code>static float FGetCloser(float Ref, float A, float B);</code>  Returns the closer value of A and B</li> </ul> <ul> <li>\u2705 <code>static float FGetFurther(float Ref, float A, float B);</code>  Returns the further value of A and B</li> </ul> <ul> <li>\u2705 <code>static uint8 BGetCloserSubNum(uint8 Ref, uint8 RefA, uint8 RefB, uint8 A, uint8 B);</code>  Returns the closer value of A and B using provided numbers</li> </ul> <ul> <li>\u2705 <code>static uint8 BGetFurtherSubNum(uint8 Ref, uint8 RefA, uint8 RefB, uint8 A, uint8 B);</code>  Returns the further value of A and B using provided numbers</li> </ul> <ul> <li>\u2705 <code>static int32 IGetCloserSubNum(int32 Ref, int32 RefA, int32 RefB, int32 A, int32 B);</code>  Returns the closer value of A and B using provided numbers</li> </ul> <ul> <li>\u2705 <code>static int32 IGetFurtherSubNum(int32 Ref, int32 RefA, int32 RefB, int32 A, int32 B);</code>  Returns the further value of A and B using provided numbers</li> </ul> <ul> <li>\u2705 <code>static float FGetCloserSubNum(float Ref, float RefA, float RefB, float A, float B);</code>  Returns the closer value of A and B using provided numbers</li> </ul> <ul> <li>\u2705 <code>static float FGetFurtherSubNum(float Ref, float RefA, float RefB, float A, float B);</code>  Returns the further value of A and B using provided numbers</li> </ul> <ul> <li>\u2705 <code>static void CloserByteArray(const uint8 ByteRefValue, const TArray&lt;uint8&gt;&amp; ByteArray, const bool NotEqual, int32&amp; IndexOfCloserValue, uint8&amp; CloserValue);</code>  Returns the closer byte in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.</li> </ul> <ul> <li>\u2705 <code>static void FurtherByteArray(const uint8 ByteRefValue, const TArray&lt;uint8&gt;&amp; ByteArray, int32&amp; IndexOfFurtherValue, uint8&amp; FurtherValue);</code>  Returns the further byte in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.</li> </ul> <ul> <li>\u2705 <code>static void CloserIntegerArray(const int32 IntRefValue, const TArray&lt;int32&gt;&amp; IntArray, const bool NotEqual, int32&amp; IndexOfCloserValue, int32&amp; CloserValue);</code>  Returns the closer integer in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.</li> </ul> <ul> <li>\u2705 <code>static void FurtherIntegerArray(const int32 IntRefValue, const TArray&lt;int32&gt;&amp; IntArray, int32&amp; IndexOfFurtherValue, int32&amp; FurtherValue);</code>  Returns the further integer in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.</li> </ul> <ul> <li>\u2705 <code>static void CloserFloatArray(const float FloatRefValue, const TArray&lt;float&gt;&amp; FloatArray, const bool NotEqual, int32&amp; IndexOfCloserValue, float&amp; CloserValue);</code>  Returns the closer float in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.</li> </ul> <ul> <li>\u2705 <code>static void FurtherFloatArray(const float FloatRefValue, const TArray&lt;float&gt;&amp; FloatArray, int32&amp; IndexOfFurtherValue, float&amp; FurtherValue);</code>  Returns the further float in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.</li> </ul> <ul> <li>\u2705 <code>static void MinByteArray(const TArray&lt;uint8&gt;&amp; ByteArray, const int32 NumberOfIndexToDiscard, int32&amp; IndexOfMinValue, float&amp; MinValue);</code>  Returns the min byte in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.</li> </ul> <ul> <li>\u2705 <code>static void MaxByteArray(const TArray&lt;uint8&gt;&amp; ByteArray, const int32 NumberOfIndexToDiscard, int32&amp; IndexOfMaxValue, float&amp; MaxValue);</code>  Returns the max byte in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.</li> </ul> <ul> <li>\u2705 <code>static void MinIntegerArray(const TArray&lt;int32&gt;&amp; IntArray, const int32 NumberOfIndexToDiscard, int32&amp; IndexOfMinValue, float&amp; MinValue);</code>  Returns the min integer in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.</li> </ul> <ul> <li>\u2705 <code>static void MaxIntegerArray(const TArray&lt;int32&gt;&amp; IntArray, const int32 NumberOfIndexToDiscard, int32&amp; IndexOfMaxValue, float&amp; MaxValue);</code>  Returns the max integer in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.</li> </ul> <ul> <li>\u2705 <code>static void MinFloatArray(const TArray&lt;float&gt;&amp; FloatArray, const int32 NumberOfIndexToDiscard, int32&amp; IndexOfMinValue, float&amp; MinValue);</code>  Returns the min float in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.</li> </ul> <ul> <li>\u2705 <code>static void MaxFloatArray(const TArray&lt;float&gt;&amp; FloatArray, const int32 NumberOfIndexToDiscard, int32&amp; IndexOfMaxValue, float&amp; MaxValue);</code>  Returns the max float in the array and their index at which it was found. Returns value of 0 and index of -1 if the supplied array is empty.</li> </ul> <ul> <li>\u274c <code>return T();</code>  Returns closer value in a generic way Returns further value in a generic way Closer number to given of Array @param    Array of templated type @param  Reference value templated type to compare @param    Optional boolean to search only the closer values and no the equals @param  Optional pointer for returning the index of the closer element, if multiple closer elements the first index is returned @return The closer value found in the array or default value if the array was empty or can't find a correct value</li> </ul> <ul> <li>\u274c <code>return T();</code>  Further number to given of Array @param    Array of templated type @param  Reference value templated type to compare @param    Optional pointer for returning the index of the further element, if multiple further elements the first index is returned @return   The further value found in the array or default value if the array was empty</li> </ul> <ul> <li>\u274c <code>return TT();</code>  Closer number to given of Array @param Array of templated type @param  Reference value templated type to compare @param    Optional boolean to search only the closer values and no the equals @param  Optional pointer for returning the index of the closer element, if multiple closer elements the first index is returned @return The closer value found in the array or default value if the array was empty or can't find a correct value</li> </ul>"},{"location":"purpleprint/core/api/purpleprint-core-math.html#classstruct-upurpleprintcoremath","title":"Class/Struct: UPurpleprintCoreMath","text":"<ul> <li> <p><code>T CurCloser = ((Reference - Values[0]) &gt;= (T)0) ? (Reference - Values[0]) : -(Reference - Values[0]);</code></p> </li> <li> <p><code>int32 CurCloserIndex = 0;</code></p> </li> <li> <p><code>T CurFurther = ((Reference - Values[0]) &gt;= (T)0) ? (Reference - Values[0]) : -(Reference - Values[0]);</code></p> </li> <li> <p><code>int32 CurFurtherIndex = 0;</code></p> </li> <li> <p><code>TArray&lt;T&gt; keysArray;</code></p> </li> <li> <p><code>TArray&lt;TT&gt; valuesArray;</code></p> </li> <li> <p><code>T curCloser = ((Reference - keysArray[0]) &gt;= (T)0) ? (Reference - keysArray[0]) : -(Reference - keysArray[0]);</code></p> </li> </ul> <p>_Values  </p> <ul> <li><code>int32 curCloserIndex = 0;</code></li> </ul>"},{"location":"purpleprint/core/api/purpleprint-core-misc-editor.html","title":"PurpleprintCoreMiscEditor.h","text":""},{"location":"purpleprint/core/api/purpleprint-core-misc-editor.html#classstruct-upurpleprintcoremisceditor-inherits-from-ublueprintfunctionlibrary","title":"Class/Struct: UPurpleprintCoreMiscEditor (inherits from UBlueprintFunctionLibrary)","text":"<ul> <li>\u2705 <code>static FTransform GetEditorActiveCameraTransform();</code> </li> </ul> <ul> <li>\u2705 <code>static FVector GetEditorActiveCameraLocation();</code> </li> </ul> <ul> <li>\u2705 <code>static FRotator GetEditorActiveCameraRotation();</code> </li> </ul>"},{"location":"purpleprint/core/api/purpleprint-core-misc.html","title":"PurpleprintCoreMisc.h","text":""},{"location":"purpleprint/core/api/purpleprint-core-misc.html#classstruct-upurpleprintcoremisc-inherits-from-ublueprintfunctionlibrary","title":"Class/Struct: UPurpleprintCoreMisc (inherits from UBlueprintFunctionLibrary)","text":"<ul> <li>\u2705 <code>static EPurpleCoreAxis PurpleCoreAlignAxisToAxis(EPurpleCoreAlignAxis Align);</code> </li> </ul> <ul> <li>\u2705 <code>static EPurpleCoreAlignAxis PurpleCoreAxisToAlignAxis(EPurpleCoreAxis Axis);</code> </li> </ul> <ul> <li>\u2705 <code>static FVector GetAxisVectorFromTransform(const FTransform&amp; Transform, EPurpleCoreAxis Align);</code> </li> </ul> <ul> <li>\u2705 <code>static FVector GetAlignVectorFromTransform(const FTransform&amp; Transform, EPurpleCoreAlignAxis Align);</code> </li> </ul> <ul> <li>\u2705 <code>static FVector2D FloatSplitToVector2D( const float FloatValue );</code>  Returns FVector2D(A,B) from a float A.B</li> </ul> <ul> <li>\u2705 <code>static FVector FloatSplitToVector( const float FloatValue );</code>  Returns FVector(A,B,0) from a float A.B</li> </ul> <ul> <li>\u2705 <code>static FVector4 FloatSplitToVector4( const float FloatValue );</code>  Returns FVector4(A,B,0,0) from a float A.B</li> </ul> <ul> <li>\u2705 <code>static FVector2D ClampVector2D(FVector2D Value, FVector2D Min, FVector2D Max);</code> </li> </ul> <ul> <li>\u2705 <code>static FVector ClampVector(FVector Value, FVector Min, FVector Max);</code> </li> </ul> <ul> <li>\u2705 <code>static FVector4 ClampVector4(FVector4 Value, FVector4 Min, FVector4 Max);</code> </li> </ul> <ul> <li>\u2705 <code>static FVector2D VectorToVector2D( const FVector &amp;VecValue );</code>  Returns FVector2D(A,B) from the FVector(A,B,C)</li> </ul> <ul> <li>\u2705 <code>static FVector2D Vector4ToVector2D( const FVector4 &amp;Vec4Value );</code>  Returns FVector2D(A,B) from the FVector4(A,B,C,D)</li> </ul> <ul> <li>\u2705 <code>static FVector VectorIntToVector( const FIntVector &amp;VecIntValue );</code>  Returns FVector(A,B,0) from the FVector2D(A,B)</li> </ul> <ul> <li>\u2705 <code>static FVector Vector2DToVector( const FVector2D &amp;Vec2Value );</code>  Returns FVector(A,B,0) from the FVector2D(A,B)</li> </ul> <ul> <li>\u2705 <code>static FVector Vector4ToVector( const FVector4 &amp;Vec4Value );</code>  Returns FVector(A,B,C) from the FVector4(A,B,C,D)</li> </ul> <ul> <li>\u2705 <code>static FIntVector VectorToVectorInt( const FVector &amp;VecValue );</code>  Returns FVector(A,B,0) from the FVector2D(A,B)</li> </ul> <ul> <li>\u2705 <code>static FVector4 Vector2DToVector4( const FVector2D &amp;Vec2Value );</code>  Returns FVector4(A,B,0,0) from the FVector2D(A,B)</li> </ul> <ul> <li>\u2705 <code>static FVector4 VectorToVector4( const FVector &amp;VecValue );</code>  Returns FVector4(A,B,C,0) from the FVector(A,B,C)</li> </ul> <ul> <li>\u2705 <code>static FRotator RotatorOrderInvert( const FRotator &amp;RotValue );</code>  Returns FRotator(C,B,A) from the FRotator(A,B,C)</li> </ul> <ul> <li>\u2705 <code>static FVector2D Vector2DOrderInvert( const FVector2D &amp;Vec2Value );</code>  Returns FVector2D(B,A) from the FVector2D(A,B)</li> </ul> <ul> <li>\u2705 <code>static FVector VectorOrderInvert( const FVector &amp;VecValue );</code>  Returns FVector(C,B,A) from the FVector(A,B,C)</li> </ul> <ul> <li>\u2705 <code>static FVector4 Vector4OrderInvert( const FVector4 &amp;Vec4Value );</code>  Returns FVector4(D,C,B,A) from the FVector4(A,B,C,D)</li> </ul> <ul> <li>\u2705 <code>static FRotator RotatorOrderRight( const FRotator &amp;RotValue );</code>  Returns FRotator(C,A,B) from the FRotator(A,B,C)</li> </ul> <ul> <li>\u2705 <code>static FVector VectorOrderRight( const FVector &amp;VecValue );</code>  Returns FVector(C,A,B) from the FVector(A,B,C)</li> </ul> <ul> <li>\u2705 <code>static FVector4 Vector4OrderRight( const FVector4 &amp;Vec4Value );</code>  Returns FVector(D,A,B,C) from the FVector(A,B,C)</li> </ul> <ul> <li>\u2705 <code>static FRotator RotatorOrderLeft( const FRotator &amp;RotValue );</code>  Returns FRotator(B,C,A) from the FRotator(A,B,C)</li> </ul> <ul> <li>\u2705 <code>static FVector VectorOrderLeft( const FVector &amp;VecValue );</code>  Returns FVector(B,C,A) from the FVector(A,B,C)</li> </ul> <ul> <li>\u2705 <code>static FVector4 Vector4OrderLeft( const FVector4 &amp;Vec4Value );</code>  Returns FVector(B,C,D,A) from the FVector(A,B,C,D)</li> </ul> <ul> <li>\u2705 <code>static uint8 GetByteArrayAlpha(const TArray&lt;uint8&gt;&amp; Array, const float Alpha);</code>  Given an Alpha value get the aprox value in the array</li> </ul> <ul> <li>\u2705 <code>static int32 GetIntegerArrayAlpha(const TArray&lt;int32&gt;&amp; Array, const float Alpha);</code>  Given an Alpha value get the aprox value in the array</li> </ul> <ul> <li>\u2705 <code>static float GetFloatArrayAlpha(const TArray&lt;float&gt;&amp; Array, const float Alpha);</code>  Given an Alpha value get the aprox value in the array</li> </ul> <ul> <li>\u2705 <code>static FVector2D GetVector2DArrayAlpha(const TArray&lt;FVector2D&gt;&amp; Array, const float Alpha);</code>  Given an Alpha value get the aprox value in the array</li> </ul> <ul> <li>\u2705 <code>static FVector GetVectorArrayAlpha(const TArray&lt;FVector&gt;&amp; Array, const float Alpha);</code>  Given an Alpha value get the aprox value in the array</li> </ul> <ul> <li>\u2705 <code>static FRotator GetRotatorArrayAlpha(const TArray&lt;FRotator&gt;&amp; Array, const float Alpha);</code>  Given an Alpha value get the aprox value in the array</li> </ul> <ul> <li>\u2705 <code>static FTransform GetTransformArrayAlpha(const TArray&lt;FTransform&gt;&amp; Array, const float Alpha);</code>  Given an Alpha value get the aprox value in the array</li> </ul> <ul> <li>\u2705 <code>static FTransform GetTransformArrayAlphaLerp(const TArray&lt;FTransform&gt;&amp; Array, const float Alpha, const bool bLoop = false);</code>  Given an Alpha value get the aprox value in the array</li> </ul> <ul> <li>\u2705 <code>static FVector GetActiveCameraLocation(const UObject* WorldContextObject, FRotator&amp; Rotation);</code> </li> </ul> <ul> <li>\u2705 <code>static AActor* SpawnActorClone(AActor* Actor, const FTransform&amp; Transform);</code> </li> </ul> <ul> <li>\u2705 <code>static void CopySceneComponentParams(USceneComponent* Source, USceneComponent* Target);</code> </li> </ul> <ul> <li>\u2705 <code>static void CopyPrimitiveComponentParams(UPrimitiveComponent* Source, UPrimitiveComponent* Target, bool bCopyMaterials = true);</code> </li> </ul> <ul> <li>\u2705 <code>static void CopyStaticMeshComponentParams(UStaticMeshComponent* Source, UStaticMeshComponent* Target);</code> </li> </ul> <ul> <li>\u2705 <code>static void CopyDecalComponentParams(UDecalComponent* Source, UDecalComponent* Target);</code> </li> </ul> <ul> <li>\u2705 <code>static void CopyNiagaraComponentParams(UNiagaraComponent* Source, UNiagaraComponent* Target);</code> </li> </ul> <ul> <li>\u2705 <code>static void CopyParticleComponentParams(UParticleSystemComponent* Source, UParticleSystemComponent* Target);</code> </li> </ul> <ul> <li>\u2705 <code>static bool IsValidCollisionProfileName(FName ProfileName);</code> </li> </ul> <ul> <li>\u2705 <code>static TArray&lt;FName&gt; GetAllCollisionProfileNames();</code>  This function is editor only</li> </ul> <ul> <li>\u2705 <code>static bool SetPrimitiveComponentMaterials(UPrimitiveComponent* Component, TArray&lt;UMaterialInterface*&gt; Materials);</code> </li> </ul> <ul> <li>\u2705 <code>static bool SetActorStaticMeshMaterials(AStaticMeshActor* Actor, TArray&lt;UMaterialInterface*&gt; Materials);</code> </li> </ul>"},{"location":"purpleprint/core/api/purpleprint-core-misc.html#classstruct-fpurpletracestruct","title":"Class/Struct: FPurpleTraceStruct","text":"<ul> <li> <p><code>FVector Origin = FVector::ZeroVector;</code></p> </li> <li> <p><code>float Length = 200.f;</code></p> </li> <li> <p><code>EPurpleCoreAxis Direction = EPurpleCoreAxis::eZN;</code></p> </li> <li> <p><code>FVector DirectionVector = FVector(0.f, 0.f, -1.f);</code></p> </li> </ul> <p>Alternative vector manually set  </p> <ul> <li> <p><code>TEnumAsByte&lt;ETraceTypeQuery&gt; Channel = ETraceTypeQuery::TraceTypeQuery1;</code></p> </li> <li> <p><code>bool bComplex = true;</code></p> </li> <li> <p><code>bool bIgnoreSelf = true;</code></p> </li> <li> <p><code>TArray&lt;AActor*&gt; ActorsToIgnore;</code></p> </li> <li> <p><code>bool bDebug = false;</code></p> </li> </ul>"},{"location":"purpleprint/core/api/purpleprint-core-misc.html#classstruct-fpurpletracealignstruct","title":"Class/Struct: FPurpleTraceAlignStruct","text":"<ul> <li> <p><code>FVector Origin = FVector::ZeroVector;</code></p> </li> <li> <p><code>float Length = 200.f;</code></p> </li> <li> <p><code>EPurpleCoreAlignAxis Direction = EPurpleCoreAlignAxis::eFree;</code></p> </li> <li> <p><code>FVector DirectionVector = FVector(0.f, 0.f, -1.f);</code></p> </li> </ul> <p>Alternative vector manually set  </p> <ul> <li> <p><code>TEnumAsByte&lt;ETraceTypeQuery&gt; Channel = ETraceTypeQuery::TraceTypeQuery1;</code></p> </li> <li> <p><code>bool bComplex = true;</code></p> </li> <li> <p><code>bool bIgnoreSelf = true;</code></p> </li> <li> <p><code>TArray&lt;AActor*&gt; ActorsToIgnore;</code></p> </li> <li> <p><code>bool bAlignNormal = true;</code></p> </li> <li> <p><code>FVector AlignNormalMask = FVector(0.f, 0.f, 1.f);</code></p> </li> <li> <p><code>bool bDebug = false;</code></p> </li> </ul>"},{"location":"purpleprint/core/api/purpleprint-core-platform.html","title":"PurpleprintCorePlatform.h","text":""},{"location":"purpleprint/core/api/purpleprint-core-platform.html#classstruct-upurpleprintcoreplatform-inherits-from-ublueprintfunctionlibrary","title":"Class/Struct: UPurpleprintCorePlatform (inherits from UBlueprintFunctionLibrary)","text":"<ul> <li>\u2705 <code>static FString GetObjectFullName(UObject* Object);</code> </li> </ul> <ul> <li>\u2705 <code>static FString GetSoftObjectName(TSoftObjectPtr&lt;UObject&gt; InObject);</code> </li> </ul> <ul> <li>\u2705 <code>static FName GetPersistentLevelName(class UObject* WorldContextObject);</code> </li> </ul> <ul> <li>\u2705 <code>static FName GetStreamLevelNameFromActor(AActor* Actor);</code> </li> </ul> <ul> <li>\u2705 <code>static FName GetStreamLevelNameFromReference(const TSoftObjectPtr&lt;UWorld&gt; World);</code> </li> </ul> <ul> <li>\u2705 <code>static FName GetCorrectAssetName(const FString String);</code> </li> </ul> <ul> <li>\u2705 <code>static bool IsEditorBuild();</code> </li> </ul> <ul> <li>\u2705 <code>static bool IsDebugBuild();</code> </li> </ul> <ul> <li>\u2705 <code>static bool IsDevelopmentBuild();</code> </li> </ul> <ul> <li>\u2705 <code>static bool IsShippingBuild();</code> </li> </ul> <ul> <li>\u2705 <code>static void GetPrimaryMonitorResolution(int32&amp; Width, int32&amp; Height);</code>  Returns the primary monitor resolution.</li> </ul> <ul> <li>\u2705 <code>static TArray&lt;FPurpleDisplayInfo&gt; GetMonitorsInfo();</code> </li> </ul> <ul> <li>\u2705 <code>static int32 GetMonitorsNum();</code> </li> </ul> <ul> <li>\u2705 <code>static FPurpleDisplayInfo GetPrimaryMonitorInfo();</code> </li> </ul> <ul> <li>\u2705 <code>static int32 GetPrimaryMonitorIndex();</code> </li> </ul> <ul> <li>\u2705 <code>static FString GetPrimaryMonitorName();</code> </li> </ul> <ul> <li>\u2705 <code>static bool IsIndexPrimaryMonitor(const int32 Index);</code> </li> </ul> <ul> <li>\u2705 <code>static FPurpleDisplayInfo GetMonitorInfoByIndex(const int32 Index);</code> </li> </ul> <ul> <li>\u2705 <code>static FString GetMonitorName(const int32 Index);</code> </li> </ul> <ul> <li>\u274c <code>static bool GetSupportedFullscreenResolutionsByIndex(TArray&lt;FIntPoint&gt;&amp; Resolutions, const int32 Index);</code>  FIntPoint not exposed to Blueprints sadly</li> </ul> <ul> <li>\u2705 <code>static int32 DateTimeToUnixTimeStamp(const FDateTime&amp; DateTime);</code> </li> </ul> <ul> <li>\u274c <code>static int64 DateTimeToUnixTimeStamp64(const FDateTime&amp; DateTime);</code> </li> </ul> <ul> <li>\u2705 <code>static FString GetCPUBrandName();</code> </li> </ul> <ul> <li>\u2705 <code>static FString GetCPUVendorName();</code> </li> </ul> <ul> <li>\u2705 <code>static int32 GetCPUCores();</code> </li> </ul> <ul> <li>\u2705 <code>static FString GetGPUBrandName();</code> </li> </ul> <ul> <li>\u2705 <code>static FString GetGPUDriverInfo();</code> </li> </ul> <ul> <li>\u2705 <code>static FString GetOSVersion();</code> </li> </ul> <ul> <li>\u2705 <code>static FString GetNetRoleString(const ENetRole Role);</code> </li> </ul> <ul> <li>\u274c <code>static FString GetNetModeString(const ENetMode Mode);</code>  Undefined for Blueprints so cannot be exposed</li> </ul>"},{"location":"purpleprint/core/api/purpleprint-core-platform.html#classstruct-fpurpledisplayinfo","title":"Class/Struct: FPurpleDisplayInfo","text":"<ul> <li> <p><code>FString Name;</code></p> </li> <li> <p><code>FString ID;</code></p> </li> <li> <p><code>int32 NativeWidth = 0;</code></p> </li> <li> <p><code>int32 NativeHeight = 0;</code></p> </li> <li> <p><code>FIntPoint MaxResolution = FIntPoint(ForceInitToZero);</code></p> </li> <li> <p><code>bool bIsPrimary = false;</code></p> </li> <li> <p><code>int32 DPI = 0;</code></p> </li> </ul>"},{"location":"purpleprint/core/api/purpleprint-core-random.html","title":"PurpleprintCoreRandom.h","text":""},{"location":"purpleprint/core/api/purpleprint-core-random.html#classstruct-upurpleprintcorerandom-inherits-from-ublueprintfunctionlibrary","title":"Class/Struct: UPurpleprintCoreRandom (inherits from UBlueprintFunctionLibrary)","text":"<ul> <li>\u2705 <code>static int32 GetRandomIndexByWeight( const TArray&lt;float&gt; Weights);</code>  Returns a pseudo - random integer index based on weights.</li> </ul> <ul> <li>\u2705 <code>static int32 GetRandomIndexByWeightStream(FRandomStream const&amp; Stream, const TArray&lt;float&gt; Weights);</code> </li> </ul> <ul> <li>\u2705 <code>static FVector RandomVector(FVector Min, FVector Max);</code> </li> </ul> <ul> <li>\u2705 <code>static FVector RandomVectorStream(FRandomStream const&amp; Stream, FVector Min, FVector Max);</code> </li> </ul> <ul> <li>\u2705 <code>static FVector RandomVectorBox(FBox Range);</code> </li> </ul> <ul> <li>\u2705 <code>static FVector RandomVectorBoxStream(FRandomStream const&amp; Stream, FBox Range);</code> </li> </ul> <ul> <li>\u2705 <code>static FRotator RandomRotatorBox(FBox Range);</code> </li> </ul> <ul> <li>\u2705 <code>static FRotator RandomRotatorBoxStream(FRandomStream const&amp; Stream, FBox Range);</code> </li> </ul> <ul> <li>\u2705 <code>static int32 RandomRange(FInt32Range Range);</code> </li> </ul> <ul> <li>\u2705 <code>static int32 RandomRangeStream(FRandomStream const&amp; Stream, FInt32Range Range);</code> </li> </ul> <ul> <li>\u2705 <code>static float RandomFloatRange(FFloatRange Range);</code> </li> </ul> <ul> <li>\u2705 <code>static float RandomFloatRangeStream(FRandomStream const&amp; Stream, FFloatRange Range);</code> </li> </ul> <ul> <li>\u2705 <code>static FVector2D GetRandomPointInCircle(const float Radius = 100.f, const float InnerRadius = 0.0f);</code> </li> </ul> <ul> <li>\u2705 <code>static FVector2D GetRandomPointInCircleStream(FRandomStream const&amp; Stream, const float Radius = 100.f, const float InnerRadius = 0.0f);</code> </li> </ul> <ul> <li>\u2705 <code>static FVector GetRandomPointInSphere(const float Radius = 100.f, const bool bAlt = false, const FVector Location = FVector::ZeroVector);</code> </li> </ul> <ul> <li>\u2705 <code>static FVector GetRandomPointInSphereStream(FRandomStream const&amp; Stream, const float Radius = 100.f, const bool bAlt = false, const FVector Location = FVector::ZeroVector);</code> </li> </ul> <ul> <li>\u2705 <code>static FVector GetRandomPointInBoundingBoxStream(FRandomStream const&amp; Stream, const FVector Origin, const FVector BoxExtent);</code> </li> </ul>"},{"location":"purpleprint/core/api/actors/purpleprint-core-manager-actor.html","title":"PurpleprintCoreManagerActor.h","text":""},{"location":"purpleprint/core/api/actors/purpleprint-core-manager-actor.html#classstruct-apurpleprintcoremanageractor-inherits-from-aactor","title":"Class/Struct: APurpleprintCoreManagerActor (inherits from AActor)","text":"<ul> <li>\u2705 <code>virtual void SetSeed(int32 Seed);</code>  Utility</li> </ul> <ul> <li>\u2705 <code>virtual void GenerateRandomSeed();</code> </li> </ul> <ul> <li>\u274c <code>virtual void TickEditor(float DeltaTime);</code>  Called every frame</li> </ul>"},{"location":"purpleprint/core/api/actors/purpleprint-core-manager-actor.html#classstruct-apurpleprintcoremanageractor","title":"Class/Struct: APurpleprintCoreManagerActor","text":"<ul> <li><code>USceneComponent* SceneComp;</code></li> </ul> <p>Sets default values for this actor's properties  </p> <ul> <li> <p><code>UBillboardComponent* IconBB;</code></p> </li> <li> <p><code>UPurpleprintCoreManagerComponent* ManagerComp;</code></p> </li> <li> <p><code>int32 RandomSeed = 0;</code></p> </li> </ul> <p>Called when an instance of this class is placed (in editor) or spawned. @param  Transform           The transform the actor was constructed at. Allow actors to initialize themselves on the C++ side after all of their components have been initialized, only called during gameplay Called when the game starts or when spawned  </p> <ul> <li> <p><code>FRandomStream RandomStream;</code></p> </li> <li> <p><code>bool bDebug = false;</code></p> </li> </ul>"},{"location":"purpleprint/core/api/components/purpleprint-core-cable-component.html","title":"PurpleprintCoreCableComponent.h","text":""},{"location":"purpleprint/core/api/components/purpleprint-core-cable-component.html#classstruct-upurpleprintcorecablecomponent","title":"Class/Struct: UPurpleprintCoreCableComponent","text":"<ul> <li><code>FVector PreviousWorldLocation;</code></li> </ul>"},{"location":"purpleprint/core/api/components/purpleprint-core-manager-component.html","title":"PurpleprintCoreManagerComponent.h","text":""},{"location":"purpleprint/core/api/components/purpleprint-core-manager-component.html#classstruct-upurpleprintcoremanagercomponent-inherits-from-uactorcomponent","title":"Class/Struct: UPurpleprintCoreManagerComponent (inherits from UActorComponent)","text":"<ul> <li>\u274c <code>virtual void TickEditorComponent(float DeltaTime);</code> </li> </ul>"},{"location":"purpleprint/core/api/components/purpleprint-core-manager-component.html#classstruct-upurpleprintcoremanagercomponent","title":"Class/Struct: UPurpleprintCoreManagerComponent","text":"<ul> <li> <p><code>FVector WorldCameraLocation;</code></p> </li> <li> <p><code>FRotator WorldCameraRotation;</code></p> </li> </ul>"},{"location":"purpleprint/core/api/player/purpleprint-hud.html","title":"PurpleprintHUD.h","text":""},{"location":"purpleprint/core/api/player/purpleprint-hud.html#classstruct-apurpleprinthud-inherits-from-ahud","title":"Class/Struct: APurpleprintHUD (inherits from AHUD)","text":"<ul> <li>\u2705 <code>void SetControlMode(bool bInGame);</code> </li> </ul> <ul> <li>\u2705 <code>void DisplayInGameMenu(bool bDisplay, bool bMenuCall = false);</code> </li> </ul>"},{"location":"purpleprint/core/api/player/purpleprint-hud.html#classstruct-apurpleprinthud","title":"Class/Struct: APurpleprintHUD","text":"<ul> <li> <p><code>UPurpleprintUserWidget* Widget;</code></p> </li> <li> <p><code>bool bMenuUIOnly = true;</code></p> </li> </ul>"},{"location":"purpleprint/core/api/ui/purpleprint-user-widget.html","title":"PurpleprintUserWidget.h","text":""},{"location":"purpleprint/core/api/ui/purpleprint-user-widget.html#classstruct-upurpleprintuserwidget-inherits-from-uuserwidget","title":"Class/Struct: UPurpleprintUserWidget (inherits from UUserWidget)","text":"<ul> <li>\u274c <code>void DisplaySubtitles(const FText&amp; Text);</code>  Sets default values for this actor's properties Called every frame</li> </ul> <ul> <li>\u274c <code>void OnSettingsUpdate();</code>  Need to be ufunction in order to bind, runtime fail</li> </ul> <ul> <li>\u2705 <code>void DisplaySubtitlesWidget(const FText&amp; Text, const bool bVisible = false);</code> </li> </ul> <ul> <li>\u2705 <code>void SetSubtitlesInfo(const int32&amp; Size, const FLinearColor&amp; Color, const FLinearColor&amp; BackgroundColor);</code> </li> </ul> <ul> <li>\u2705 <code>void GetSubtitlesInfo(int32&amp; Size, FLinearColor&amp; Color, FLinearColor&amp; BackgroundColor);</code> </li> </ul> <ul> <li>\u2705 <code>void OnDisplayInGameMenu(bool bDisplay);</code> </li> </ul> <ul> <li>\u274c <code>virtual void OnDisplayInGameMenu_Implementation(bool bDisplay);</code> </li> </ul> <ul> <li>\u2705 <code>void ReturnToMenu();</code> </li> </ul> <ul> <li>\u274c <code>virtual void ReturnToMenu_Implementation();</code> </li> </ul> <ul> <li>\u2705 <code>void ReturnToGame();</code> </li> </ul> <ul> <li>\u274c <code>virtual void ReturnToGame_Implementation();</code> </li> </ul>"},{"location":"purpleprint/core/api/ui/purpleprint-user-widget.html#classstruct-upurpleprintuserwidget","title":"Class/Struct: UPurpleprintUserWidget","text":"<ul> <li> <p><code>int32 SubtitlesSize;</code></p> </li> <li> <p><code>FLinearColor SubtitlesColor;</code></p> </li> <li> <p><code>FLinearColor SubtitlesBackgroundColor;</code></p> </li> <li> <p><code>bool bSubtitlesEnabled = true;</code></p> </li> </ul>"},{"location":"purpleprint/path/index.html","title":"Purpleprint Path","text":"<p>Purpleprint Path specializes in spline-based mesh placement designed for creating roads, paths, and other linear infrastructure within your levels.  </p>"},{"location":"purpleprint/path/index.html#features","title":"Features:","text":"<ul> <li>Generates meshes that follow spline curves smoothly, making it easy to build roads, railways, or similar elongated elements.  </li> <li>Works similarly to the Placer tools but focuses on continuous mesh placement along splines rather than discrete objects.  </li> <li>Provides parameters to control mesh spacing, alignment, and variation for realistic and customizable results.  </li> </ul> <p>This plugin streamlines the process of creating natural and polished pathways or infrastructure elements that adapt dynamically to your level design.  </p>"},{"location":"purpleprint/placer/index.html","title":"Purpleprint Placer","text":"<p>Populate your world with precision, flexibility, and control using smart placement actors without a single line of code or script.</p> <p>Purpleprint Placer is a powerful instance placement system for level designers, technical artists, and game developers. It offers several actor types that allow procedural and manual placement of meshes and actors using transform logic, alignments, and data-driven systems. Writen in C++ as plugin for Unreal Engine for best performance, quality and features, you don't need to use any script or blueprint or C++ to use it.   </p>"},{"location":"purpleprint/placer/index.html#components","title":"Components","text":""},{"location":"purpleprint/placer/index.html#smart-field-placer","title":"Smart Field Placer","text":"<p>Randomly places actors, static meshes, decals, and other objects within a defined area, ideal for scattering foliage, props, or decals. Forests, cities, decoration, AI crowd seeding. Alignment to surfaces, randomized transforms, offsets, and more...  </p>"},{"location":"purpleprint/placer/index.html#supported-placement-modes","title":"Supported Placement Modes","text":"<ul> <li>\ud83c\udfaf Point \u2013 Random placement at arbitrary positions</li> <li>\ud83d\udce6 Area \u2013 Random placement inside a volume box or sphere.</li> <li>\ud83e\uddca Grid \u2013 Structured grid layout</li> <li>\ud83c\udf00 Scatter \u2013 Surface-based scattering (e.g. painting)</li> <li>\ud83e\uddcd Manual \u2013 Manual transform list</li> <li>\ud83c\udf0c Niagara \u2013 Particle-based placement  </li> </ul>"},{"location":"purpleprint/placer/index.html#smart-spline-placer","title":"Smart Spline Placer","text":"<p>Allows placement of objects along a spline with randomization and alignment options, useful for fences, lights, or environmental details following a curved path. (\u26a0\ufe0f Warning: This is NOT a spline based mesh solution, no curved elements, just static) Places instances along a spline. Perfect for road details, cables, fences, rivers, and natural formations.    </p>"},{"location":"purpleprint/placer/index.html#distribution-types","title":"Distribution Types","text":"<ul> <li>\ud83d\udd00 Random \u2013 Scattered along spline</li> <li>\ud83d\udccf Distance \u2013 Placed at defined intervals</li> <li>\u26ab Points \u2013 One per spline point</li> <li>\ud83e\uddee Distributed \u2013 Evenly spaced  </li> </ul>"},{"location":"purpleprint/placer/index.html#extra-controls","title":"Extra Controls","text":"<ul> <li>\ud83c\udf9a\ufe0f Curve-based radius control</li> <li>\ud83e\udded Tangent- or axis-based rotation</li> <li>\ud83d\udcd0 Per-point rotation and scale overrides</li> </ul>"},{"location":"purpleprint/placer/index.html#fixed-field-placer","title":"Fixed Field Placer","text":"<p>Places baked objects in array formations with options for random offsets and rotations, perfecto for fixed, non-procedural placement using editable structs or external data assets like CSV/DataTables.  </p>"},{"location":"purpleprint/placer/index.html#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udcc1 Live CSV loading \u2013 Import and reload CSV files at runtime inside the Editor</li> <li>\ud83e\udde9 Prefab-like DataAssets \u2013 Store and manage reusable instance groups</li> <li>\ud83e\udde0 Baked placement \u2013 Optimize performance with static instances</li> <li>\ud83d\udd04 Replace or regenerate from default templates</li> <li>\ud83d\udd27 Supports export to placed actors \u2013 Instantly convert procedural results into real level actors</li> <li>\ud83d\udce6 Bake to Fixed Actor \u2013 Send SmartField or Spline results directly into FixedActor instance arrays</li> </ul>"},{"location":"purpleprint/placer/index.html#smart-atlas-material","title":"Smart Atlas Material","text":"<p>This function and material for Unreal allows you to use texture atlas for your models sharing the same texture so allowing to recycle the same material sharing one drawcall.  </p>"},{"location":"purpleprint/placer/index.html#key-features_1","title":"Key Features","text":"<ul> <li>\ud83e\udde9 Modular Function \u2013 Reuse the nodes in the materials you wish</li> <li>\ud83d\udd27 Multipurpose \u2013 Can be used with instances or normal models as you wish</li> <li>\ud83d\udd00 Random \u2013 Random per world, smart options or per instance random</li> <li>\ud83e\udde0 Shared one draw call \u2013 Optimize performance with static instances</li> </ul>"},{"location":"purpleprint/placer/index.html#example-use-cases","title":"\ud83e\udde9 Example Use Cases","text":"<ul> <li>\ud83c\udf32 Procedural caves, debris, forest, generation, asteroids</li> <li>\ud83c\udfd9\ufe0f Populating urban environments, stadiums</li> <li>\ud83d\udd17 Placing fences, details, tracks along splines</li> <li>\ud83d\udccd Import complete stadiums, crowds, instances from Blender or Houdini with Bridge</li> <li>\ud83d\udd2c Scattering props or FX emitters</li> <li>\ud83d\udcd0 Creating modular sets from DataAssets</li> <li>\ud83d\udce4 Exporting layout to actors for manual editing</li> </ul>"},{"location":"purpleprint/placer/index.html#requirements","title":"\ud83d\udee0\ufe0f Requirements","text":"<ul> <li>Unreal Engine 4.27+ &amp; 5.0 to 5.6</li> <li>\u26a0\ufe0f Non editor version need Blueprint and/or C++ integration Guide</li> <li>\u2139\ufe0f Don't need to know programming or blueprints to use it.</li> </ul>"},{"location":"purpleprint/placer/index.html#whats-included","title":"\ud83d\udcce What\u2019s Included?","text":"<ul> <li>Smart Actor (Parent)</li> <li>Smart Field Actor</li> <li>Smart Spline Actor</li> <li>Fixed Actor (Parent)</li> <li>Fixed Field Actor</li> <li>Smart Data Asset</li> <li>Fixed Data Asset</li> <li>Actors Manager for editor ticks</li> <li>Editor manager</li> <li>Complete source code</li> <li>Basic Blueprints</li> <li>Random per instance atlas shader</li> <li>Get &amp; Set Niagara example</li> <li>Editor Scripts</li> <li>Fully Exposed Structs to Blueprints</li> <li>Example models and atlas color palettes created with Purple Image</li> </ul>"},{"location":"purpleprint/placer/index.html#placement-features","title":"Placement Features","text":"<ul> <li>Baking functions from static to instance and instance to static.</li> <li>Baking tools from world to actor and from actor to world.</li> <li>Supports alignment of placed objects to walls, floors, or any surface, ensuring natural integration with the environment.  </li> <li>Provides control over density, randomness, and orientation to fit diverse design needs.  </li> </ul>"},{"location":"purpleprint/placer/index.html#global-features","title":"Global Features","text":"Feature Description Instance Support Static Meshes, Blueprints, Particles, Actors Advanced Transforms Rotation, scale, and position randomization and overrides Per-Instance Control Adjust physics, rendering, materials, and more Editor Visual Tools Transform widgets, per-instance editing High Performance Static or dynamic instances, optimized batching CSV &amp; DataTable Support Import transforms or full instances with live updates DataAssets as Prefabs Fully reusable instance definitions for fast setup Full Blueprint Access All core logic exposed to Blueprints for full control Export to Level Actors Create placed actors from procedural instances Bake to Fixed Convert procedural layouts to fixed data for performance Fully Exposed You can create your custom classes via exposed functions"},{"location":"purpleprint/placer/index.html#global-instance-configurations","title":"Global Instance Configurations","text":""},{"location":"purpleprint/placer/index.html#rendering","title":"Rendering","text":"<p>InstanceRenderingStruct, defines the global rendering parameters for light, shadows...</p> Property Category Description <code>bCastShadow</code> Shadows Whether the component should cast shadows. <code>bFarShadow</code> Shadows Casts far shadows (directional lights only). <code>LightChannels</code> Illumination Lighting channels the component uses. <code>bDynamicShadow</code> Shadows Casts dynamic shadows. Depends on <code>bCastShadow</code>. <code>bStaticShadow</code> Shadows Casts static shadows. Depends on <code>bCastShadow</code>. <code>bCastContactShadow</code> Shadows Enables contact shadows. <code>bSelfShadowOnly</code> Shadows Only casts shadow on itself. <code>bCastHiddenShadow</code> Shadows Casts shadow even if hidden. <code>bAffectDistanceFieldLighting</code> Shadows Affects distance field lighting. <code>bReceivesDecals</code> Occlusion Whether the object receives decals. <code>DetailMode</code> Occlusion Render detail level (Low, Medium, High). <code>DrawDistance</code> Occlusion Max draw distance (in world units). <code>DrawScreenSize</code> Occlusion Screen size threshold for rendering. <code>bAllowCullDistanceVolume</code> Occlusion Allow cull distance volume overrides. <code>bNeverDistanceCull</code> Occlusion Never cull the object by distance. <code>bUseAsOccluder</code> Occlusion Used as occluder in depth-only pass. <code>bTreatAsBackgroundForOcclusion</code> Occlusion Optimizes occlusion for background elements."},{"location":"purpleprint/placer/index.html#physics-collision","title":"Physics &amp; Collision","text":"<p>InstancePhysicsStruct, defined physics, collisions and states. </p> Property Category Description <code>Mobility</code> Rendering Defines mobility: Static, Stationary, or Movable. <code>CollisionProfile</code> Collision Preset collision behavior (e.g., BlockAll). <code>CollisionProfileName</code> Collision Name of custom collision profile. Used if profile is <code>eCustom</code>. <code>Collision</code> Collision Collision enabled/disabled flags. <code>CollisionChannel</code> Collision Defines the collision object type (channel). <code>bSimulatePhysics</code> Physics Enables physics simulation. Not supported by instanced meshes. <code>bEnableGravity</code> Physics Enables gravity. Requires physics simulation. <code>MassScale</code> Physics Custom mass scale. <code>LinearDamping</code> Physics Resistance to linear motion. <code>AngularDamping</code> Physics Resistance to angular motion."},{"location":"purpleprint/placer/changelog.html","title":"Changelog","text":"<p>Versions changelog listed from last to older one.</p>"},{"location":"purpleprint/placer/changelog.html#versions","title":"Versions","text":""},{"location":"purpleprint/placer/changelog.html#210-20250812","title":"2.1.0 (2025/08/12)","text":""},{"location":"purpleprint/placer/changelog.html#new","title":"New","text":"<ul> <li>Added traces from origin for Smart Field.</li> <li>Added traces from spline closest point for Smart Spline.</li> <li>Added scatter for external actors.</li> <li>Added scatter filtering per component.</li> <li>New container system on master actor, allow any kind of sub purple actor.</li> <li>Added instances pusher from children to parent. (EXPERIMENTAL NOT ENABLED)</li> <li>Added instances sharer on self actor. (EXPERIMENTAL)(Disabled by Default)</li> <li>Added new runtime foliage spawner component. (EXPERIMENTAL)</li> <li>Added spline cloner from any actor.</li> <li>Added manual points distribution random or per point.</li> <li>Added manual points distribution with random shared or unique.</li> <li>Added random per child instance setter for purple actors. (Disabled by Default)</li> <li>New components comparator.</li> <li>Added Examples models, materials and textures.</li> <li>Added example map basic overall version.</li> <li>Added perf test map.</li> <li>Added origin to the data storage, makes it heavier but allows more options.</li> </ul>"},{"location":"purpleprint/placer/changelog.html#changes","title":"Changes","text":"<ul> <li>Complete instances processor rework to support pusher and sub instances.</li> <li>Complete split for component creation and exposed blueprint functions.</li> <li>Complete rework on tracing system allowing some custom vars.</li> <li>Filter child actors in case they are incorrect.</li> <li>Options loader changed so it don't ignore some options.</li> <li>Port all the names to the new ones so is more clear.</li> <li>Delayed instances creation to support the new container system.</li> <li>Duplicated calls in some wrong cases removed faster load times.</li> <li>Disable the checkers for 4.27, fixed the issues in core technically.</li> </ul>"},{"location":"purpleprint/placer/changelog.html#fixed","title":"Fixed","text":"<ul> <li>Fix some wrong transforms in specific cases.</li> <li>Manual transforms getting mixed.</li> <li>Some options getting ignored by the loader.</li> <li>Correct some duplicated code not needed on instances copy.</li> <li>Booleans incorrect in the viewer.</li> <li>Missing elements randomly in the viewer.</li> <li>Crash on specific indexes for Field actor.</li> <li>Ghost actors because manual system.</li> <li>Added a locker for spliner copy index.</li> </ul>"},{"location":"purpleprint/placer/changelog.html#minor-changes","title":"Minor Changes","text":"<ul> <li>Improve offsets calculation.</li> <li>Minor cleanup and spelling fixes.</li> </ul>"},{"location":"purpleprint/placer/changelog.html#know-issues","title":"Know Issues","text":"<ul> <li>The new pusher causes wrong transforms. (Disabled for now)</li> <li>The new pusher causes random lost of actors once editor childrens.</li> <li>Randomly if you edit a children actor set to an instance you will get warnings.</li> </ul>"},{"location":"purpleprint/placer/changelog.html#200-195-20250808","title":"2.0.0 &amp; 1.9.5 (2025/08/08)","text":""},{"location":"purpleprint/placer/changelog.html#new_1","title":"New","text":"<ul> <li>Added static instances world relocator.</li> <li>Added dynamic instances asset generator for instances.</li> <li>Added scatter mode to array tools.</li> <li>Added manual transforms to array tools.</li> <li>Added scatter align per direction.</li> <li>Added scatter surface direction.</li> <li>Added spline direction aligment.</li> <li>Added niagara particles spawner.</li> <li>Added niagara particles multiple functions and new getter.</li> <li>Added runtime capturer.</li> <li>Added captured actors baker.</li> <li>Added skeletalmeshes support</li> <li>Added skeletalmeshes animation via property.</li> <li>Added random and linear random to each spawner.</li> <li>Added multi spline support.</li> <li>Added per spline transform locator component.</li> <li>Added multi spline cloner.</li> <li>Added spline different distributions</li> <li>Added spline sync with parent.</li> <li>Added spline offsets</li> <li>Added post trace location and rotation instance control.</li> <li>Added icons to the actors.</li> <li>Added main get and set functions to classes</li> <li>Added spline random and distributed modes.</li> <li>Added spline random 11 different distribution methods</li> <li>Added custom curves support to random distribution</li> <li>Added spline random distribution bias and power.</li> <li>Added creator to Smart DataAsset.</li> </ul>"},{"location":"purpleprint/placer/changelog.html#changes_1","title":"Changes","text":"<ul> <li>Complete plugin class renames to make it more clear.</li> <li>Set default too from DataAssets.</li> <li>Convert some functions to pure that aren't need.</li> <li>Rename the niagara input names.</li> <li>Rework the placer.</li> <li>Rework the transform system.</li> <li>Rework the trace system.</li> <li>Rework the class names.</li> </ul>"},{"location":"purpleprint/placer/changelog.html#fixed_1","title":"Fixed","text":"<ul> <li>Fix a crash with the old capturer.</li> <li>Fix load properties missing.</li> <li>Fix selector after create actors.</li> <li>Fix baker issues when transform components.</li> <li>Fix missing instances in the void when the spanwer is smaller than it's total.</li> <li>Fix duplicated elements due a missing else.</li> <li>Fix aligment issues.</li> <li>Fix some issues on loaders.</li> <li>Fix Duplicated instances in world when random applies.</li> <li>Fix the locker isn't properly clamp.</li> <li>Fix Wrong selection of created actors.</li> <li>Fix Flickering models after creation.</li> <li>Fix Crash at convert models to static instance.</li> </ul>"},{"location":"purpleprint/placer/changelog.html#minor-changes_1","title":"Minor Changes","text":"<ul> <li>Improve offsets calculation.</li> <li>Rename the system random to point, more clear.</li> <li>Minor cleanup and spelling fixes.</li> </ul>"},{"location":"purpleprint/placer/changelog.html#know-issues_1","title":"Know Issues","text":"<ul> <li>???</li> </ul>"},{"location":"purpleprint/placer/changelog.html#151-20250701","title":"1.5.1 (2025/07/01)","text":""},{"location":"purpleprint/placer/changelog.html#new_2","title":"New","text":"<ul> <li>New physics management.</li> <li>New Instance to Static Instance.</li> <li>New Instance to Actor baker.</li> <li>New Culling and Ilumination settings per instance.</li> <li>Editor manager to update Assets.</li> <li>Editor manager to update actors.</li> <li>Editor settings for managers.</li> <li>Add models to the editor browser.</li> <li>Decorators AKA childrens for instances with complete settings too.</li> <li>Offset transforms fixed to Grid.</li> <li>Offset transforms to Splines.</li> <li>Random location is taking scale or apply to scale.</li> <li>Uniform scaling in spline based scale and masking based on axis.</li> <li>Pass all instances by reference correcty by type.</li> </ul>"},{"location":"purpleprint/placer/changelog.html#changes_2","title":"Changes","text":"<ul> <li>Per isntance data list.</li> <li>Disabled Niagara placer from Static systems as makes no sense for static systems.</li> <li>Disabled Niagara placer from Array systerms for now, issues must be fixed.</li> <li>Niagara correct copy parameters into instances.</li> </ul>"},{"location":"purpleprint/placer/changelog.html#fixed_2","title":"Fixed","text":"<ul> <li>Fix an issue with the type of classes to the actors.</li> <li>Fix random selection of models and freezes.</li> <li>Fix spline radius issues.</li> <li>Fix grid isn't centered.</li> <li>Fix leak on instances.</li> <li>Fix create model isn't working.</li> <li>Fix create instance isn't working.</li> <li>Fix tracer don't works.</li> <li>Fix scale isn't working correctlyfrom blender.</li> </ul>"},{"location":"purpleprint/placer/changelog.html#minor-changes_2","title":"Minor Changes","text":"<ul> <li>Minor cleanup and spelling fixes.</li> </ul>"},{"location":"purpleprint/placer/changelog.html#know-issues_2","title":"Know Issues","text":"<ul> <li>Duplicated instances in world when random applies.</li> <li>The locker isn't properly clamp.</li> <li>Wrong selection of created actors.</li> <li>Flickering models after creation.</li> <li>Crash at convert models to static instance.</li> </ul>"},{"location":"purpleprint/placer/changelog.html#134-20250625","title":"1.3.4 (2025/06/25)","text":""},{"location":"purpleprint/placer/changelog.html#new_3","title":"New","text":"<ul> <li>Support closed splines.</li> <li>Apply Scale from Spline to Meshes.</li> <li>Add Static and Dynamic DataAssets, remove old one.</li> <li>Dynamic and Static DataAssets support for every instance type.</li> <li>Limit number of imported instances to editor.</li> </ul>"},{"location":"purpleprint/placer/changelog.html#changes_3","title":"Changes","text":"<ul> <li>Added proper headers and remove the need to lock in editor some struct features.</li> </ul>"},{"location":"purpleprint/placer/changelog.html#fixes","title":"Fixes","text":"<ul> <li>Limit parameters on c inputs.</li> <li>Fix an issue with the edit display at Static Instances.</li> <li>Fix blocking UI elements.</li> </ul>"},{"location":"purpleprint/placer/changelog.html#minor-changes_3","title":"Minor Changes","text":"<ul> <li>Minor cleanup and spelling fixes.</li> </ul>"},{"location":"purpleprint/placer/changelog.html#know-issues_3","title":"Know Issues","text":"<ul> <li>Random selection of models and freezes.</li> <li>Spline radius issues.</li> <li>Grid isn't centered.</li> <li>Leak on instances.</li> <li>Create model isn't working.</li> <li>Create instance isn't working.</li> <li>Tracer don't works.</li> <li>Scale isn't working correctlyfrom blender.</li> </ul>"},{"location":"purpleprint/placer/changelog.html#125-10-20250625","title":"1.2.5 - 1.0 (2025/06/25)","text":""},{"location":"purpleprint/placer/changelog.html#new_4","title":"New","text":"<ul> <li>New atlas random material.</li> <li>Added Spline tools.</li> </ul>"},{"location":"purpleprint/placer/changelog.html#misc","title":"Misc","text":"<ul> <li>Initial plugin released to the public.</li> </ul>"},{"location":"purpleprint/placer/changelog.html#minor-changes_4","title":"Minor Changes","text":"<ul> <li>Small changes and fixes.</li> </ul>"},{"location":"purpleprint/placer/changelog.html#know-issues_4","title":"Know Issues","text":"<ul> <li>???</li> </ul>"},{"location":"purpleprint/placer/installation.html","title":"Installation","text":"<p>Unreal Engine is requiered for this tool, the versions from 4.27 to 5.6 are supported.  </p>"},{"location":"purpleprint/placer/installation.html#installing-the-plugin","title":"Installing the plugin:","text":"<ul> <li>If you are using FAB just install it from the Epic Games Launcher, add it to your engine installation.</li> <li>If you are using the Itch.IO or Gumroad version, then follow the next steps: (REQUIRES VISUAL STUDIO ON WINDOWS)</li> </ul>"},{"location":"purpleprint/placer/installation.html#installing-the-itchio-or-gumroad-plugin","title":"Installing the Itch.io or Gumroad plugin:","text":"<ul> <li>First of all you need a copy of Unreal Engine 4.27 to 5.6 installed can be a Github Custom build or can be the launcher version.</li> <li>Second you need to Install Visual Studio 2022 from Microsoft Website or alike. (Make sure you are using the correct versions that Epic list)</li> <li>Setup Visual Studio following the steps that Epic Games provide</li> <li>Download the version Purpleprint Placer from the page Itch.io, should be a zip compressed file. PLEASE NOTE: This version don't includes the compiled .dlls right now, so you need to compile them yourself manually.  </li> <li>Now follow the correct path:</li> </ul> Launcher VersionGithub Version <p>Your engine version is an installement from the Epic Games Launcher.  </p> <p>A.) Open your project or create one, if you are creating one make sure it's a C++ one as the wiki url showcase, so you can SKIP the next step.  </p> <p>B.) Download the version from the page, should be a zip compressed file, inside there should be different folders named with different ranges of Unreal Engine versions \"/\", make sure you enter inside the one you are using, be ready to drag and drop that folder \"Plugins/\" and go to the next step.  </p> <p>C.) Go to the folder of your project \"MyProject\" and drop there the folder \"Plugins/\" from the zip file, you can close now the zip.  </p> <p>D.) Once inside the project if your project isn't a C++ one then you need to convert it. (If you don't have a .sln file in your folder or Source folder then isn't a C++ project).  To convert the project you have to follow this instructions using the Class Wizard is the best and faster way if you are new. Make sure you create an empty class, the name isn't a problem do whatever you want, it will create an empty class used by the engine to setup the whole project.  </p> <p>E.) Now go to your project root at the *.uproject file as in the image (note you will have those files with the name of your project):  right click, (in windows 11 show extra options) and then select \"Generate Visual Studio project files\" as in the image: </p> <p>F.) Double click in the *.sln project file you will see as in the prior image with the name of your project. Once it open you have to go to the top of the window of Visual Studio and select the project settings: \"Development Editor - Win64 - YourProjectName\", as in the image at the bottom, then you have to go to the right and search for your project name in the \"Solution Explorer\" window as in the image in the bottom and then right click and select \"Build\".   If you did the step correctly then you should have the last result from the image, that means you can close Visual Studio now and reopen your .uproject.  </p> <p>G.) Close Visual Studio now and reopen your .uproject, go to the plugins browser inside browse for \"Purpleprint\" you should have it listed at the left as Category, then enable the Placer one, close the project. H.) Right click on the .uproject and repeat the step E &amp; F, then you will be able to open the project and work normally, don't need to do this again if you don't update the plugin or change anything from it.</p> <p>Your engine version is a custom version from Github.  </p> <p>A.) Download the version from the page, should be a zip compressed file, inside there should be different folders named with different ranges of Unreal Engine versions \"/\", make sure you enter inside the one you are using, then inside \"/Plugins\".  </p> <p>B.) You know the drill, go to the folder \"YourEngineVersion/Engine/Plugins/Marketplace/\" and drop there the folder \"PurpleprintPlacer\".  </p> <p>C.) Go to the root folder of the engine where you installed the plugin, double click on \"GenerateProjectFiles.bat\" wait for it and then open the UE4.sln or UE5.sln.  </p> <p>D.) Will skip this part as is the same from the users using the Launcher version, you can check that tab but you probably know the drill, right click in UE project name at the \"Solution Explorer\" window and press \"Build\", wait for it and you should have done this part.  </p> <p>E.) Close Visual Studio now and reopen your .uproject, go to the plugins browser inside browse for \"Purpleprint\" you should have it listed at the left as Category, then enable the Placer one, close the project and reopen and you should be ready to go.  </p> <p>Congratulations you finished installing and enabling the plugin.</p>"},{"location":"purpleprint/placer/installation.html#upgrading-to-20-skip-if-you-are-installing-a-fresh-version","title":"Upgrading to 2.0: (Skip if you are installing a fresh version)","text":"<ul> <li>Updating to 2.0 version: The main classes has been renamed from Dynamic &amp; Static to Smart &amp; Fixed to be more clear to the final user, need to use the redirectors in the \"Config/DefaultEngine.ini\" of your project or engine folder:  </li> </ul> <p>1.) First add to the DefaultEngine.ini this lines:  </p> <p>DefaultEngine.ini<pre><code>[CoreRedirects]\n+StructRedirects=(OldName=\"PurplePlacerDynamicInstanceStruct\",NewName=\"PurplePlacerSmartInstanceStruct\")\n+StructRedirects=(OldName=\"PurplePlacerDynamicDecoratorInstanceStruct\",NewName=\"PurplePlacerSmartDecoratorInstanceStruct\")\n+StructRedirects=(OldName=\"PurplePlacerStaticInstanceStruct\",NewName=\"PurplePlacerFixedInstanceStruct\")\n+StructRedirects=(OldName=\"PurplePlacerStaticEditableInstanceStruct\",NewName=\"PurplePlacerFixedEditableInstanceStruct\")\n+StructRedirects=(OldName=\"/Script/PurpleprintPlacer.PurplePlacerDynamicInstanceStruct\",NewName=\"/Script/PurpleprintPlacer.PurplePlacerSmartInstanceStruct\")\n+StructRedirects=(OldName=\"/Script/PurpleprintPlacer.PurplePlacerDynamicDecoratorInstanceStruct\",NewName=\"/Script/PurpleprintPlacer.PurplePlacerSmartDecoratorInstanceStruct\")\n+StructRedirects=(OldName=\"/Script/PurpleprintPlacer.PurplePlacerStaticInstanceStruct\",NewName=\"/Script/PurpleprintPlacer.PurplePlacerFixedInstanceStruct\")\n+StructRedirects=(OldName=\"/Script/PurpleprintPlacer.PurplePlacerStaticEditableInstanceStruct\",NewName=\"/Script/PurpleprintPlacer.PurplePlacerFixedEditableInstanceStruct\")\n+ClassRedirects=(OldName=\"PurpleprintPlacerDynamicDataAsset\",NewName=\"PurplePlacerSmartDataAsset\",InstanceOnly=true)\n+ClassRedirects=(OldName=\"PurpleprintPlacerStaticDataAsset\",NewName=\"PurplePlacerFixedDataAsset\",InstanceOnly=true)\n+ClassRedirects=(OldName=\"PurpleprintPlacerArrayActor\",NewName=\"PurplePlacerSmartFieldActor\",InstanceOnly=true)\n+ClassRedirects=(OldName=\"PurpleprintPlacerSplineActor\",NewName=\"PurplePlacerSmartSplineActor\",InstanceOnly=true)\n+ClassRedirects=(OldName=\"PurpleprintPlacerDArrayActor\",NewName=\"PurplePlacerSmartFieldActor\",InstanceOnly=true)\n+ClassRedirects=(OldName=\"PurpleprintPlacerDSplineActor\",NewName=\"PurplePlacerSmartSplineActor\",InstanceOnly=true)\n+ClassRedirects=(OldName=\"PurpleprintPlacerStaticActor\",NewName=\"PurplePlacerFixedFieldActor\",InstanceOnly=true)\n+ClassRedirects=(OldName=\"PurpleprintPlacerSArrayActor\",NewName=\"PurplePlacerFixedFieldActor\",InstanceOnly=true)\n+ClassRedirects=(OldName=\"/Script/PurpleprintPlacer.PurpleprintPlacerDynamicDataAsset\",NewName=\"/Script/PurpleprintPlacer.PurplePlacerSmartDataAsset\")\n+ClassRedirects=(OldName=\"/Script/PurpleprintPlacer.PurpleprintPlacerStaticDataAsset\",NewName=\"/Script/PurpleprintPlacer.PurplePlacerFixedDataAsset\")\n+ClassRedirects=(OldName=\"/Script/PurpleprintPlacer.PurpleprintPlacerArrayActor\", NewName=\"/Script/PurpleprintPlacer.PurplePlacerSmartFieldActor\")\n+ClassRedirects=(OldName=\"/Script/PurpleprintPlacer.PurpleprintPlacerSplineActor\", NewName=\"/Script/PurpleprintPlacer.PurplePlacerSmartSplineActor\")\n+ClassRedirects=(OldName=\"/Script/PurpleprintPlacer.PurpleprintPlacerDArrayActor\", NewName=\"/Script/PurpleprintPlacer.PurplePlacerSmartFieldActor\")\n+ClassRedirects=(OldName=\"/Script/PurpleprintPlacer.PurpleprintPlacerDSplineActor\", NewName=\"/Script/PurpleprintPlacer.PurplePlacerSmartSplineActor\")\n+ClassRedirects=(OldName=\"/Script/PurpleprintPlacer.PurpleprintPlacerStaticActor\", NewName=\"/Script/PurpleprintPlacer.PurplePlacerFixedFieldActor\")\n+ClassRedirects=(OldName=\"/Script/PurpleprintPlacer.PurpleprintPlacerSArrayActor\", NewName=\"/Script/PurpleprintPlacer.PurplePlacerFixedFieldActor\")\n\n[/Script/Engine.Engine]\n+ActiveStructRedirects=(OldStructName=\"PurplePlacerDynamicInstanceStruct\",NewStructName=\"PurplePlacerSmartInstanceStruct\")\n+ActiveStructRedirects=(OldStructName=\"PurplePlacerDynamicDecoratorInstanceStruct\",NewStructName=\"PurplePlacerSmartDecoratorInstanceStruct\")\n+ActiveStructRedirects=(OldStructName=\"PurplePlacerStaticInstanceStruct\",NewStructName=\"PurplePlacerFixedInstanceStruct\")\n+ActiveStructRedirects=(OldStructName=\"PurplePlacerStaticEditableInstanceStruct\",NewStructName=\"PurplePlacerFixedEditableInstanceStruct\")\n+ActiveStructRedirects=(OldStructName=\"PurpleprintPlacer.PurplePlacerDynamicInstanceStruct\",NewStructName=\"PurpleprintPlacer.PurplePlacerSmartInstanceStruct\")\n+ActiveStructRedirects=(OldStructName=\"PurpleprintPlacer.PurplePlacerDynamicDecoratorInstanceStruct\",NewStructName=\"PurpleprintPlacer.PurplePlacerSmartDecoratorInstanceStruct\")\n+ActiveStructRedirects=(OldStructName=\"PurpleprintPlacer.PurplePlacerStaticInstanceStruct\",NewStructName=\"PurpleprintPlacer.PurplePlacerFixedInstanceStruct\")\n+ActiveStructRedirects=(OldStructName=\"PurpleprintPlacer.PurplePlacerStaticEditableInstanceStruct\",NewStructName=\"PurpleprintPlacer.PurplePlacerFixedEditableInstanceStruct\")\n+ActiveClassRedirects=(OldClassName=\"PurpleprintPlacer.PurpleprintPlacerDynamicDataAsset\",NewClassName=\"PurpleprintPlacer.PurplePlacerSmartDataAsset\")\n+ActiveClassRedirects=(OldClassName=\"PurpleprintPlacer.PurpleprintPlacerStaticDataAsset\",NewClassName=\"PurpleprintPlacer.PurplePlacerFixedDataAsset\")\n+ActiveClassRedirects=(OldClassName=\"PurpleprintPlacer.PurpleprintPlacerArrayActor\",NewClassName=\"PurpleprintPlacer.PurplePlacerSmartFieldActor\")\n+ActiveClassRedirects=(OldClassName=\"PurpleprintPlacer.PurpleprintPlacerSplineActor\",NewClassName=\"PurpleprintPlacer.PurplePlacerSmartSplineActor\")\n+ActiveClassRedirects=(OldClassName=\"PurpleprintPlacer.PurpleprintPlacerDArrayActor\",NewClassName=\"PurpleprintPlacer.PurplePlacerSmartFieldActor\")\n+ActiveClassRedirects=(OldClassName=\"PurpleprintPlacer.PurpleprintPlacerDSplineActor\",NewClassName=\"PurpleprintPlacer.PurplePlacerSmartSplineActor\")\n+ActiveClassRedirects=(OldClassName=\"PurpleprintPlacer.PurpleprintPlacerStaticActor\",NewClassName=\"PurpleprintPlacer.PurplePlacerFixedFieldActor\")\n+ActiveClassRedirects=(OldClassName=\"PurpleprintPlacer.PurpleprintPlacerSArrayActor\",NewClassName=\"PurpleprintPlacer.PurplePlacerFixedFieldActor\")\n</code></pre> 2.) Open your project and make sure you open and resave all the elements in your project using this classes and files, created Blueprints, DataAssets and Levels.  </p> <p>3.) Once you save them all, you can close the project and then remove the pasted lines at the top, everything should work fine once you reopen.  </p> <ul> <li> Note: You can use the content from 4.27 up to the 5.6, note you will need to edit EditorScripts outputs since in 5.0 changed and will return you a warning.  </li> </ul>"},{"location":"purpleprint/placer/fixed/index.html","title":"Fixed Placer","text":"<p>The Fixed Placer is one of the containers for the Purpleprint Placer plugin can contain data like the Smart ones but is limited to represent it on the world with minimal features, is used as baker support from dynamic ones and as container once you convert the level actors to instances. This tool can be used too to import data from external software using the Bridge.</p>"},{"location":"purpleprint/placer/fixed/index.html#actors","title":"Actors:","text":"<ul> <li>Fixed Placer: This is the parent class for the fixed placers, contains most of the code, only use this if you know what you are doing.  </li> <li>Fixed Field: Places baked objects in array formations with options for random offsets and rotations, perfect for more structured but varied asset placement. Can be spawned via the browser.  </li> </ul>"},{"location":"purpleprint/placer/fixed/index.html#assets","title":"Assets:","text":"<ul> <li>Fixed Instance: Structure allows to set all the settings for normal actors, culling, light filtering, shadows, and almost all the elements you find by default in the engine.  </li> <li>Fixed DataAsset: Container that can import data from external CSV files using Bridge on LIVE, allows to define main core properties and can be used as prefab for you actors, if you drag &amp; drop it to the world, starting the 1.8+ will create by default a Fixed Field.</li> </ul>"},{"location":"purpleprint/placer/fixed/index.html#features","title":"Features:","text":"<ul> <li>Customize all the settings you have or almost all the settings for light, shadows, culling from normal actors.</li> <li>Can be used for static meshes, skeletal meshes, decals, particles, niagara particles and actors you want to.</li> <li>Can be used as container for all the other placer actors and world actors.</li> <li>The most lightweight from all the actors, can have thousan of instances while keep the performance.</li> <li>Supports world aligned shifting, so you can move the actor across the level and keep the instances in correct location.  </li> <li>Allows to shift the origin of the components whatever you want, per component and globally.  </li> </ul>"},{"location":"purpleprint/placer/fixed/index.html#instance-system","title":"Instance System","text":"<ul> <li><code>Instances</code>: List of dynamic instance definitions used for placement.</li> <li><code>DefaultInstance</code>: Fallback or template instance definition.</li> <li><code>DataAsset</code>: External data-driven asset to generate instances automatically.</li> </ul>"},{"location":"purpleprint/placer/fixed/index.html#data-asset-support","title":"Data Asset Support","text":"<p>FixedDataAsset  </p> Property Category Description <code>CSV</code> File Path to CSV file for import. <code>DataTable</code> File Target DataTable to load transforms from. <code>bUpdateDataTableFromCSV</code> File Auto-update DataTable from CSV on load. <code>bLoadAsSingleEntity</code> File Treat entire CSV as a single instance. <code>bLocationOnlyStruct</code> File Only use location, ignore rot/scale. <code>LocationOnlyTransform</code> Transform Transform to apply to location-only data. <code>ImportLocationScale</code> Transform Scale multiplier for location. <code>ImportScale</code> Transform Scale for full transform imports. <code>ImportInstancesMax</code> Advanced Max number of instances to import. <code>ImportTransformsPerInstanceMax</code> Advanced Max transforms per instance. <code>Instances</code> Instances Array of fixed instances to place."},{"location":"purpleprint/placer/fixed/index.html#instance-configuration","title":"Instance Configuration","text":""},{"location":"purpleprint/placer/fixed/index.html#instance","title":"Instance","text":"<p>FixedInstanceStruct, defines the template and behavior of a single instance.  </p> Property Category Description <code>Name</code> Instance Identifier for the instance in a data table. <code>Asset</code> Instance \u2192 Assets Asset to spawn (Mesh, Niagara, Actor, etc.). <code>StaticMeshType</code> Assets \u2192 Mesh Static mesh usage type (Instance or Component). <code>Materials</code> Assets \u2192 Material Material overrides applied to the asset. <code>Parameter</code> Assets \u2192 Particles Parameter name for particle systems. <code>TransformComponent</code> Transform Base component transform. <code>TransformInstance</code> Transform Instance transform to be applied on top. <code>InstancesNum</code> Transform Total number of transforms (internal). <code>Physics</code> Physics Physics configuration struct. <code>Rendering</code> Rendering Rendering configuration struct."},{"location":"purpleprint/placer/fixed/fixed-field.html","title":"Fixed Field Placer","text":""},{"location":"purpleprint/placer/fixed/fixed-field.html#overview","title":"Overview","text":"<p><code>PurplePlacerFixedFieldActor</code> is a powerful Unreal Engine actor used for statically placing instances of meshes, particles, decals, and actors based on customizable spatial rules and transform logic.  This actor supports data assets.</p> <p>This actor uses <code>PurplePlacerFixedInstanceStruct</code> to define the behavior, assets, and transformation of each placed instance. It is fully Blueprintable and includes various customization options under structured UPROPERTY categories.  </p>"},{"location":"purpleprint/placer/fixed/fixed-field.html#instance-types-and-distribution-modes","title":"Instance Types and Distribution Modes","text":"Parameter Type Description <code>DataAsset</code> <code>UPurplePlacerFixedDataAsset*</code> Source asset to load prefab data <code>bUseDataAsset</code> <code>bool</code> Use data from the asset <code>Instances</code> <code>TArray&lt;FPurplePlacerFixedInstanceStruct&gt;</code> Array of static instances <code>DefaultInstance</code> <code>FPurplePlacerFixedInstanceStruct</code> Default prefab <code>InstancesTransform</code> <code>TArray&lt;FTransform&gt;</code> Manual transforms (only in edit mode) <code>bEdit</code> <code>bool</code> Enable manual placement editing via 3D widgets <code>bBake</code> <code>bool</code> Bake into static actors <code>ActorTransform</code>, <code>ActorOrigin</code>, <code>ActorExtend</code> <code>FTransform</code> / <code>FVector</code> Placement transform and bounds <code>bManagerVirtualTick</code>, <code>bManagerVirtualEditorTick</code>, <code>bManagerVirtualEditorFixedTick</code> <code>bool</code> Virtual tick behavior for editor/runtime <code>bWorldAlignedInstances</code> <code>bool</code> If true, align transforms to world space"},{"location":"purpleprint/placer/fixed/fixed-field.html#data-asset-support","title":"Data Asset Support","text":"Property Description <code>DataAsset</code> Reference to <code>UPurplePlacerFixedDataAsset</code> <code>bUseDataAsset</code> Enables loading from external asset"},{"location":"purpleprint/placer/fixed/fixed-field.html#area-distribution-settings","title":"Area &amp; Distribution Settings","text":""},{"location":"purpleprint/placer/fixed/fixed-field.html#general-transform","title":"General Transform","text":"<p>Inside Area|Transform.  </p> Property Description <code>ActorTransform</code> Global transform of the actor. <code>ActorOrigin</code> Relative origin offset. <code>ActorExtend</code> Calculated bounding box size."},{"location":"purpleprint/placer/fixed/fixed-field.html#utility-functions","title":"Utility Functions","text":"Function Description <code>Bake()</code> / <code>UnBake()</code> Finalize or reset the placement setup <code>Update()</code> / <code>Refresh()</code> Regenerates internal data <code>ClearAllInstances()</code> Deletes all runtime instances <code>ReplaceInstancesDataWithDefaultInstanceData()</code> Resets to default configuration <code>GetAllDynamicInstances()</code> / <code>GetAllStaticInstances()</code> Returns array of instance structs <code>ComponentsToActors()</code> / <code>ActorsToStaticInstancesList()</code> Conversion tools <code>ParseDataNiagara()</code> Parses transform data from Niagara particles"},{"location":"purpleprint/placer/fixed/fixed-field.html#editor-overrides","title":"Editor Overrides","text":"Function Description <code>PostEditChangeProperty()</code> Responds to property changes in editor <code>Tick()</code> Called every frame <code>OnConstruction()</code> Called on actor placement <code>BeginPlay()</code>, <code>EndPlay()</code> Runtime initialization and cleanup"},{"location":"purpleprint/placer/fixed/fixed-field.html#transform-offset-customization","title":"Transform &amp; Offset Customization","text":"<p>The actor provides several properties under the <code>Transform</code> category:</p> <ul> <li><code>ActorTransform</code>, <code>ActorOrigin</code>, <code>ActorExtend</code>: Defines the actor\u2019s spatial properties.</li> </ul>"},{"location":"purpleprint/placer/fixed/fixed-field.html#instance-placement-logic","title":"Instance Placement Logic","text":""},{"location":"purpleprint/placer/fixed/fixed-field.html#static-instances","title":"Static Instances","text":"<p>Functions used for manual or static placement:</p> <ul> <li><code>ConstructStaticInstances_Implementation(...)</code></li> <li><code>TransformStaticInstances_Implementation(...)</code></li> <li><code>BuildStaticInstances_Implementation(...)</code></li> </ul>"},{"location":"purpleprint/placer/fixed/fixed-field.html#utility-editor-functions","title":"Utility &amp; Editor Functions","text":"<ul> <li><code>Bake()</code>, <code>UnBake()</code>: Prepare or clear instance placements.</li> <li><code>Refresh()</code>, <code>Update()</code>: Used to regenerate or force rebuild of placement logic.</li> <li><code>ClearAllInstances()</code>: Removes all placed instances.</li> <li><code>GetAllStaticInstances()</code>, <code>GetAllDynamicInstances()</code>: Retrieve instance data.</li> <li><code>ReplaceInstancesDataWithDefaultInstanceData(...)</code>: Utility for resetting instance data.</li> </ul>"},{"location":"purpleprint/placer/fixed/fixed-field.html#data-asset-integration","title":"Data Asset Integration","text":"<ul> <li><code>bUseDataAsset</code>: If true, uses external asset definitions.</li> <li><code>DataAsset</code>: Source asset that includes instance definitions.</li> <li><code>GenerateInstancesFromAssets()</code>: Populates instance data from asset.</li> </ul>"},{"location":"purpleprint/placer/fixed/fixed-field.html#editor-only-debug-tools","title":"Editor-Only &amp; Debug Tools","text":"<ul> <li><code>PostEditChangeProperty(...)</code>: Used in editor to respond to property changes.</li> <li><code>bShowArea</code>: Toggles wireframe visibility.</li> <li><code>ManualTransformsCache</code>, <code>ArrayTypeCache</code>: Cached data for editor rebuilds.</li> </ul>"},{"location":"purpleprint/placer/fixed/fixed-field.html#additional-notes","title":"Additional Notes","text":"<ul> <li>This actor class is part of Purpleprint - Placer by Hevedy.</li> <li>Designed to support fixed workflows with maximum flexibility in editor.</li> </ul>"},{"location":"purpleprint/placer/smart/index.html","title":"Smart Placer","text":"<p>The Smart Placer is the dynamic containers for the Purpleprint Placer plugin can contain data and generate it with random placement and almost procedural systems allowing to spawn even sub actors of the same type and decorators around the instances, everything is properly calibrated and stored as instance for performance.  </p>"},{"location":"purpleprint/placer/smart/index.html#actors","title":"Actors:","text":"<ul> <li>Smart Placer: This is the parent class for the smart placers, contains most of the code, only use this if you know what you are doing.  </li> <li>Smart Field: Can generate big amoung of instances in different options, like grids, points, random location, using Niagara, as scatter using a static mesh and others, supported by a big list of modificators and offset tools for random offsets and rotations, perfect for more structured but varied asset placement. Can be spawned via the browser.  </li> <li>Smart Spline: Generate instances across splines, with almost the same settings from Field, plus extra elements to control the spline transform and rotations in many different ways, including noise placers and more tool. Perfect for details across roads, floors, wall details, floating elements in space and many others. Can be spawned via the browser.  </li> </ul>"},{"location":"purpleprint/placer/smart/index.html#assets","title":"Assets:","text":"<ul> <li>Smart Instance: Structure allows to define traces, complete transforms and all the settings for normal actors, culling, light filtering, shadows, and almost all the elements you find by default in the engine.  </li> <li>Smart DataAsset: Container that can generate instances based on a list of assets you provide, can be used as prefab for you actors, if you drag &amp; drop it to the world, starting the 2.0 will create by default a Smart Placer.</li> </ul>"},{"location":"purpleprint/placer/smart/index.html#features","title":"Features:","text":"<ul> <li>Customize all the settings you have or almost all the settings for light, shadows, culling from normal actors.</li> <li>Can be used for static meshes, skeletal meshes, decals, particles, niagara particles and actors you want to, included sub actors of Smart Placer.</li> <li>Allows to shift the origin of the components whatever you want, per component and per instance and globally.  </li> <li>Complete suite for random placement and almost procedural systems allowing to spawn even sub actors of the same type and decorators around the instances, everything is properly calibrated and stored as instance for performance.</li> <li>Different alignment traces so you can align the actors to surfaces of any kind, walls, floors, ceilings...</li> <li>Options of you taste to define areas, shape them as you wish with hollow and side options.</li> <li>Bias and masking per axis for fine control of spawn.</li> </ul>"},{"location":"purpleprint/placer/smart/index.html#instance-system","title":"Instance System","text":"<ul> <li><code>Instances</code>: List of dynamic instance definitions used for placement.</li> <li><code>DefaultInstance</code>: Fallback or template instance definition.</li> <li><code>DataAsset</code>: External data-driven asset to generate instances automatically.</li> </ul>"},{"location":"purpleprint/placer/smart/index.html#data-asset-support","title":"Data Asset Support","text":"<p>SmartDataAsset  </p> Property Description <code>DataAsset</code> Reference to <code>UPurplePlacerSmartDataAsset</code> <code>bUseDataAsset</code> Enables loading from external asset <code>GenerateInstancesFromAssets()</code> Function to auto-generate instance definitions from asset list"},{"location":"purpleprint/placer/smart/index.html#instance-configuration","title":"Instance Configuration","text":""},{"location":"purpleprint/placer/smart/index.html#instance","title":"Instance","text":"<p>SmartInstanceStruct, defines the template and behavior of a single instance.  </p> Property Description <code>Asset</code> Main object (mesh, particle, etc.) <code>StaticMeshType</code> Defines mesh instancing method: <code>Component</code>, <code>Instance</code>, <code>Hierarchical</code>. <code>Materials</code> Overrides for material assignment. <code>Parameter</code> Optional parameter for Niagara/particles. <code>NumDecorators</code>, <code>Decorators</code> Children/sub-instances attached to this one. <code>Transform</code> Struct controlling instance transform rules. <code>Physics</code> Struct controlling collision, physics, mobility. <code>Rendering</code> Struct controlling visibility, LOD, shadowing, etc. <code>InstancesNum</code> Runtime number of generated instances."},{"location":"purpleprint/placer/smart/index.html#transform","title":"Transform","text":"<p>InstanceTransformStruct, defines the global rendering parameters for light, shadows...  </p> Property Category Description <code>TransformComponent</code> Transform Global transform applied to all instances. <code>TransformInstance</code> Transform Per-instance transform offset. <code>Origin</code> Transform Reference point for bounding calculations. <code>Extend</code> Transform Optional override for bounding box extents. <code>RandomLocation</code> Transform\\Random Min/Max range for random location. <code>bUseLocationList</code> Transform\\Random Whether to use predefined location list. <code>LocationList</code> Transform\\Random List of predefined random locations. <code>RandomRotation</code> Transform\\Random Min/Max rotation (Pitch, Yaw, Roll). <code>bUseRotationList</code> Transform\\Random Use predefined rotations instead of random. <code>RotationList</code> Transform\\Random List of fixed rotation values. <code>RandomScale</code> Transform\\Random Min/Max uniform or non-uniform scale. <code>bRandomScaleUniform</code> Transform\\Random If true, uses X for uniform scale. <code>bUseScaleList</code> Transform\\Random Use predefined scales instead of random. <code>ScaleList</code> Transform\\Random List of specific scale vectors. <code>TargetActor</code> Transform\\Target Actor to face/look at. <code>bTargetActorInvertTransform</code> Transform\\Target Invert the look-at direction. <code>TargetRotationMask</code> Transform\\Target Per-axis rotation mask. <code>Trace</code> Transform\\Trace Trace alignment settings (surface detection, etc.)."},{"location":"purpleprint/placer/smart/index.html#trace","title":"Trace","text":"<p>TraceAlignStruct, defined the tracing options to align the instance to the world.  </p> Property Category Description <code>Origin</code> Trace Starting point of the trace. Only used when <code>Direction == eCustom</code>. <code>Length</code> Trace Trace distance. Ignored when <code>Direction == eFree</code>. <code>Direction</code> Trace Alignment axis mode: <code>eFree</code>, <code>eCustom</code>, or others. If <code>eFree</code>, trace is skipped. <code>DirectionVector</code> Trace Custom trace direction (used only with <code>eCustom</code>). <code>Channel</code> Trace Collision channel used for the trace (e.g., Visibility, WorldStatic). <code>bComplex</code> Trace If true, uses complex collision (triangle mesh). <code>bIgnoreSelf</code> Trace Ignores the actor that owns the trace component. <code>ActorsToIgnore</code> Actors List of additional actors to ignore during trace. <code>bAlignNormal</code> Align If true, aligns the instance with the hit surface's normal. <code>AlignNormalMask</code> Align Vector mask used to limit normal alignment to specific axes (e.g., Z only). <code>bUseTraceDirection</code> Align If true, uses the trace direction instead of the normal for alignment. <code>TraceOffset</code> Align Additional offset from hit location. Useful for offsetting above the surface. <code>bPostHitApplyLocation</code> Align Applies final location after trace hit. <code>bPostHitApplyRotation</code> Align Applies final rotation after trace hit. <code>bDebug</code> Debug If true, enables drawing of debug line/traces in editor/game."},{"location":"purpleprint/placer/smart/index.html#additional-notes","title":"Additional Notes","text":"<ul> <li>Those elements are shared across all the smart placer tools.</li> </ul>"},{"location":"purpleprint/placer/smart/smart-field.html","title":"Smart Field Placer","text":""},{"location":"purpleprint/placer/smart/smart-field.html#overview","title":"Overview","text":"<p><code>PurplePlacerSmartFieldActor</code> is a powerful Unreal Engine actor used for dynamically placing instances of meshes, particles, decals, and actors based on customizable spatial rules and transform logic. This actor supports randomization, data assets, Niagara simulation integration, and several custom placement strategies, such as area-based (box, sphere), manual points, or scatter.</p> <p>This actor is highly modular and uses <code>PurplePlacerSmartInstanceStruct</code> to define the behavior, assets, and transformation of each placed instance. It is fully Blueprintable and includes various customization options under structured UPROPERTY categories.</p>"},{"location":"purpleprint/placer/smart/smart-field.html#instance-types-and-distribution-modes","title":"Instance Types and Distribution Modes","text":""},{"location":"purpleprint/placer/smart/smart-field.html#placement-modes","title":"Placement Modes","text":"<p>(PurplePlacerArrayType)  </p> Enum Value Description <code>ePoint</code> Random placement of instances at arbitrary points. <code>eRandAreaBox</code> Random placement inside a defined box volume. <code>eRandAreaSphere</code> Random placement inside a sphere. <code>eGrid</code> Grid-based structured layout. <code>eManual</code> Manual list of transforms provided by user. <code>eScatter</code> Placement over a mesh surface. <code>eNiagara</code> Driven by Niagara particle simulation (experimental)."},{"location":"purpleprint/placer/smart/smart-field.html#instance-picking-modes","title":"Instance Picking Modes","text":"<p>(PurplePlacerRandomInstanceType)  </p> Enum Value Description <code>eWeight</code> Weighted random selection based on each instance\u2019s <code>Weight</code> value. <code>eRandom</code> Pure random selection across all available instances. <code>eLinear</code> Sequentially selects instances in the order they are listed."},{"location":"purpleprint/placer/smart/smart-field.html#data-asset-support","title":"Data Asset Support","text":"Property Description <code>DataAsset</code> Reference to <code>UPurplePlacerSmartDataAsset</code> <code>bUseDataAsset</code> Enables loading from external asset <code>GenerateInstancesFromAssets()</code> Function to auto-generate instance definitions from asset list"},{"location":"purpleprint/placer/smart/smart-field.html#area-distribution-settings","title":"Area &amp; Distribution Settings","text":"Property Description <code>ArrayType</code> Placement mode (<code>Grid</code>, <code>Scatter</code>, etc.) <code>Num</code>, <code>SubNum</code> Number of instances and sub-instances <code>BoxSize</code>, <code>BoxBias</code> Volume control for <code>RandAreaBox</code> <code>SphereRadius</code>, <code>SphereBias</code> Control for <code>RandAreaSphere</code> <code>Grid</code>, <code>GridCellSize</code>, <code>GridCellOrigin</code> Defines resolution and layout for <code>Grid</code> <code>ManualTransforms</code> Manual list of transforms <code>ScatterStaticMeshAsset</code>, <code>ScatterMeshTransform</code> Mesh and transform used for <code>Scatter</code> <code>ScatterDepthOffset</code> Depth offset for scattered placements <code>ScatterAlignToSurface</code>, <code>ScatterDirection</code>, <code>ScatterCustomDirectionVector</code> Surface alignment controls <code>ScatterDirectionThreshold</code> Angle tolerance for alignment <code>bShowArea</code> Toggles debug draw of area in editor"},{"location":"purpleprint/placer/smart/smart-field.html#general-transform","title":"General Transform","text":"<p>Inside Area|Transform.  </p> Property Description <code>ActorTransform</code> Global transform of the actor. <code>ActorOrigin</code> Relative origin offset. <code>ActorExtend</code> Calculated bounding box size."},{"location":"purpleprint/placer/smart/smart-field.html#randomized-transform","title":"Randomized Transform","text":"<p>Inside Area|Transform|Random.  </p> Property Description <code>RandomLocation</code>, <code>RandomRotation</code>, <code>RandomScale</code> FBox ranges for randomization. <code>bUseLocationList</code>, <code>bUseRotationList</code>, <code>bUseScaleList</code> Enables list-based override. <code>LocationList</code>, <code>RotationList</code>, <code>ScaleList</code> Predefined values for deterministic transform input. <code>bRandomScaleUniform</code> Forces uniform scaling when using random."},{"location":"purpleprint/placer/smart/smart-field.html#grid-offsets","title":"Grid Offsets","text":"<p>Used when <code>ArrayType = Grid</code> or X used globally for the rest of types. Inside Area|Transform|Offset  </p> Property Description <code>GridOffsetX/Y/Z</code> Arrays of <code>FTransform</code> applied along respective axis. <code>bGridOffsetLoopX/Y/Z</code> Enables wrap-around looping of offsets. <code>bGridOffsetLoopLockX/Y/Z</code> Restricts looping to only that axis. <code>GridOffsetAccumulativeX/Y/Z</code> Bitmask control to enable cumulative offset per iteration."},{"location":"purpleprint/placer/smart/smart-field.html#niagara-integration","title":"Niagara Integration","text":"Property Description <code>NiagaraSimulationComponent</code> Niagara simulation driver component <code>NiagaraAsset</code> Niagara system to simulate <code>bNiagaraInGame</code>, <code>bNiagaraOnConstructor</code> Control whether to simulate in game or editor <code>bNiagaraAssetIncludeRotation/Scale</code> Toggles parameter capture for rotation/scale <code>NiagaraAssetLocParamName</code>, <code>RotParamName</code>, <code>ScaleParamName</code> Custom parameter names for capture <code>NiagaraBakeSimulation()</code>, <code>Restart()</code>, <code>Stop()</code> Call-in-editor tools to control simulation baking"},{"location":"purpleprint/placer/smart/smart-field.html#utility-functions","title":"Utility Functions","text":"Function Description <code>Bake()</code> / <code>UnBake()</code> Finalize or reset the placement setup <code>Update()</code> / <code>Refresh()</code> Regenerates internal data <code>ClearAllInstances()</code> Deletes all runtime instances <code>ReplaceInstancesDataWithDefaultInstanceData()</code> Resets to default configuration <code>GetAllDynamicInstances()</code> / <code>GetAllStaticInstances()</code> Returns array of instance structs <code>ComponentsToActors()</code> / <code>ActorsToStaticInstancesList()</code> Conversion tools <code>ParseDataNiagara()</code> Parses transform data from Niagara particles"},{"location":"purpleprint/placer/smart/smart-field.html#editor-overrides","title":"Editor Overrides","text":"Function Description <code>PostEditChangeProperty()</code> Responds to property changes in editor <code>Tick()</code> Called every frame <code>OnConstruction()</code> Called on actor placement <code>BeginPlay()</code>, <code>EndPlay()</code> Runtime initialization and cleanup"},{"location":"purpleprint/placer/smart/smart-field.html#main-components-features","title":"Main Components &amp; Features","text":""},{"location":"purpleprint/placer/smart/smart-field.html#niagara-simulation","title":"Niagara Simulation","text":"<ul> <li><code>NiagaraSimulationComponent</code>: Runs Niagara simulations to place particles or other instances.</li> <li><code>ReceiveParticleData_Implementation</code>: Handles incoming particle data for placement.</li> <li><code>NiagaraAsset</code>, <code>bNiagaraInGame</code>, <code>NiagaraAssetLocParamName</code>, etc.: Configure how and when to capture and use Niagara particle data.</li> </ul>"},{"location":"purpleprint/placer/smart/smart-field.html#area-configuration","title":"Area Configuration","text":"<ul> <li><code>ArrayType</code>: Defines the placement strategy (<code>Box</code>, <code>Grid</code>, <code>Scatter</code>, <code>Manual</code>, etc.).</li> <li><code>Num</code>, <code>SubNum</code>: Controls the number of main and child instances.</li> <li><code>BoxSize</code>, <code>SphereRadius</code>, <code>Grid</code>, etc.: Spatial dimensions and resolution for placement.</li> <li><code>ManualTransforms</code>: User-defined transforms for manual placement.</li> </ul>"},{"location":"purpleprint/placer/smart/smart-field.html#randomization-controls","title":"Randomization Controls","text":"<ul> <li><code>RandomLocation</code>, <code>RandomRotation</code>, <code>RandomScale</code>: Controls randomized positioning.</li> <li><code>bUseLocationList</code>, <code>bUseRotationList</code>, <code>bUseScaleList</code>: Allows switching between list-based or pure random generation.</li> <li><code>LocationList</code>, <code>RotationList</code>, <code>ScaleList</code>: Lists for controlled random transforms.</li> </ul>"},{"location":"purpleprint/placer/smart/smart-field.html#transform-offset-customization","title":"Transform &amp; Offset Customization","text":"<p>The actor provides several properties under the <code>Transform</code> category:</p> <ul> <li><code>ActorTransform</code>, <code>ActorOrigin</code>, <code>ActorExtend</code>: Defines the actor\u2019s spatial properties.</li> </ul> <p>These parameters allow fine-grained control over placement in each axis when working with grid-type distributions.</p> <ul> <li>Axis-specific offset transforms (<code>GridOffsetX</code>, <code>GridOffsetY</code>, <code>GridOffsetZ</code>): Fine control over instance position in a grid.</li> <li><code>GridOffsetLoopX/Y/Z</code>, <code>GridOffsetAccumulativeX/Y/Z</code>: Looping and accumulation options for offsets. If enabled, loops through the offsets even if the number of instances exceeds the array size.</li> <li><code>bGridOffsetLoopLockX/Y/Z</code>: Locks looping to just the specific axis. Useful for keeping consistent transformations in multi-axis layouts.</li> <li><code>FPurplePlacerTransformBitMask</code> used to accumulate offsets per instance in a specific axis.</li> </ul> <p>These control whether each offset is added cumulatively (stacked) or used in isolation.</p>"},{"location":"purpleprint/placer/smart/smart-field.html#instance-placement-logic","title":"Instance Placement Logic","text":""},{"location":"purpleprint/placer/smart/smart-field.html#dynamic-instances","title":"Dynamic Instances","text":"<p>Functions and flags related to procedural placement:</p> <ul> <li><code>ConstructDynamicInstances_Implementation(...)</code></li> <li><code>TransformDynamicInstances_Implementation(...)</code></li> <li><code>BuildDynamicInstances_Implementation(...)</code></li> </ul>"},{"location":"purpleprint/placer/smart/smart-field.html#utility-editor-functions","title":"Utility &amp; Editor Functions","text":"<ul> <li><code>Bake()</code>, <code>UnBake()</code>: Prepare or clear instance placements.</li> <li><code>Refresh()</code>, <code>Update()</code>: Used to regenerate or force rebuild of placement logic.</li> <li><code>ClearAllInstances()</code>: Removes all placed instances.</li> <li><code>GetAllStaticInstances()</code>, <code>GetAllDynamicInstances()</code>: Retrieve instance data.</li> <li><code>ReplaceInstancesDataWithDefaultInstanceData(...)</code>: Utility for resetting instance data.</li> </ul>"},{"location":"purpleprint/placer/smart/smart-field.html#data-asset-integration","title":"Data Asset Integration","text":"<ul> <li><code>bUseDataAsset</code>: If true, uses external asset definitions.</li> <li><code>DataAsset</code>: Source asset that includes instance definitions.</li> <li><code>GenerateInstancesFromAssets()</code>: Populates instance data from asset.</li> </ul>"},{"location":"purpleprint/placer/smart/smart-field.html#editor-only-debug-tools","title":"Editor-Only &amp; Debug Tools","text":"<ul> <li><code>PostEditChangeProperty(...)</code>: Used in editor to respond to property changes.</li> <li><code>bShowArea</code>: Toggles wireframe visibility.</li> <li><code>ManualTransformsCache</code>, <code>ArrayTypeCache</code>: Cached data for editor rebuilds.</li> </ul>"},{"location":"purpleprint/placer/smart/smart-field.html#additional-notes","title":"Additional Notes","text":"<ul> <li>This actor class is part of Purpleprint - Placer by Hevedy.</li> <li>Designed to support procedural workflows with maximum flexibility in editor.</li> </ul>"},{"location":"purpleprint/placer/smart/smart-spline.html","title":"Smart Spline Placer","text":""},{"location":"purpleprint/placer/smart/smart-spline.html#overview","title":"Overview","text":"<p><code>PurplePlacerSmartSplineActor</code> is a powerful Unreal Engine actor used for dynamically placing instances of meshes, particles, decals, and actors based on customizable spatial rules and transform logic. This actor supports randomization, data assets, and several custom placement strategies, such as hollow splines, multiple splines, and different options of customization.</p> <p>This actor is highly modular and uses <code>PurplePlacerSmartInstanceStruct</code> to define the behavior, assets, and transformation of each placed instance. It is fully Blueprintable and includes various customization options under structured UPROPERTY categories.</p>"},{"location":"purpleprint/placer/smart/smart-spline.html#instance-types-and-distribution-modes","title":"Instance Types and Distribution Modes","text":""},{"location":"purpleprint/placer/smart/smart-spline.html#spline-type","title":"Spline Type","text":"<p>(PlacerSmartSplineType)  </p> Name Description <code>eRandom</code> Instances are spawned randomly along the entire spline, based on user input. <code>eDistributed</code> Instances are distributed randomly but evenly across the spline. <code>eSplinePoints</code> One instance is spawned at each spline point, determined by the number of spline points. <code>eDistance</code> Instances are placed at regular intervals along the spline, based on a specified distance."},{"location":"purpleprint/placer/smart/smart-spline.html#radial-distribution-mode","title":"Radial Distribution Mode","text":"<p>(PlacerSmartSplineRadialDistributionMode)  </p> Name Description <code>eCircle</code> Instances are aligned in a circular pattern. <code>eBox</code> Instances are aligned in a box pattern."},{"location":"purpleprint/placer/smart/smart-spline.html#length-distribution-mode","title":"Length Distribution Mode","text":"<p>(PlacerSmartSplineLengthDistributionMode)  </p> Name Description <code>eUniform</code> Instances are distributed uniformly along the spline. <code>eIn</code> Higher density of instances at the start of the spline. <code>eEaseIn</code> Gradually increases instance density towards the start of the spline. <code>eMiddle</code> More instances are placed in the middle section of the spline. <code>eEaseInOut</code> Instance density is higher in the middle, with smooth transitions at both ends. <code>eSides</code> More instances are placed at both the start and end of the spline. <code>eEaseOut</code> Gradually increases instance density towards the end of the spline. <code>eOut</code> Higher density of instances at the end of the spline. <code>eNoise</code> Instances are distributed at random locations along the spline, creating a noisy pattern. <code>eWavy</code> Instances follow a wavy distribution along the spline. <code>eCustomCurve</code> Distribution is defined by a custom user-provided curve."},{"location":"purpleprint/placer/smart/smart-spline.html#rotation-mode","title":"Rotation Mode","text":"<p>(PlacerSmartSplineRotationMode)  </p> Name Description <code>ePoint</code> Uses the spline's rotation at each placement point. <code>ePointsLerpLocation</code> Interpolates rotation between spline points based on location. <code>ePointsLerpRotation</code> Interpolates rotation between spline points, blending their rotations. <code>ePointTarget</code> Orients instances to look in the direction of the spline at each point (uses point as a target)."},{"location":"purpleprint/placer/smart/smart-spline.html#data-asset-support","title":"Data Asset Support","text":"Property Description <code>DataAsset</code> Reference to <code>UPurplePlacerSmartDataAsset</code> <code>bUseDataAsset</code> Enables loading from external asset <code>GenerateInstancesFromAssets()</code> Function to auto-generate instance definitions from asset list"},{"location":"purpleprint/placer/smart/smart-spline.html#area-distribution-settings","title":"Area &amp; Distribution Settings","text":"Parameter Type Description <code>SplineComponent</code>, <code>SplineComponents</code> <code>USplineComponent*</code> Spline source(s) <code>SplineType</code> <code>EPurplePlacerSplineType</code> Type of spline placement (random, distance, distributed...) <code>RandomInstanceType</code> <code>EPurplePlacerRandomInstanceType</code> How to select instances <code>RadialDistributionMode</code> <code>EPurplePlacerSplineRadialDistributionMode</code> Radial pattern (circle, box) <code>LengthDistributionMode</code> <code>EPurplePlacerSplineLengthDistributionMode</code> How to distribute along length <code>DistributionLengthPower</code> <code>float</code> Power curve factor <code>DistributionLengthBias</code> <code>FPurplePlacerFloatRangeBound</code> Bias for spline placement <code>DistributionLengthCurve</code> <code>UCurveFloat*</code> Custom curve (only if using CustomCurve mode) <code>RotationMode</code> <code>EPurplePlacerSplineRotationMode</code> How to orient along spline <code>bRotationUseTangent</code> <code>bool</code> Use spline tangent as rotation <code>bRotationTargetInvert</code> <code>bool</code> Invert look-at direction <code>RotationTargetMask</code> <code>FPurplePlacerVectorBitMask</code> Controls rotation axes <code>bSplineLooped</code> <code>bool</code> Whether the spline loops <code>SplinesNum</code> <code>int32</code> Number of spline copies <code>SplineTransforms</code> <code>TArray&lt;FTransform&gt;</code> Manual spline transforms <code>bSyncSplines</code> <code>bool</code> Sync child splines with master <code>Num</code>, <code>SubNum</code> <code>FPurplePlacerIntRangeBound</code> Instance counts <code>InstanceDistance</code> <code>float</code> Distance-based spacing <code>SplineRotationOnInstancesMask</code> <code>FPurplePlacerVectorBitMask</code> Apply spline rotation to instances <code>CustomSplineRotations</code>, <code>CustomSplineDefaultRotation</code> <code>TArray&lt;FRotator&gt;</code> / <code>FRotator</code> Manual rotation overrides <code>bUseCustomSplineRotationOnActors</code>, <code>bUseCustomSplineDefaultRotationValue</code> <code>bool</code> Flags for spline actor rotation <code>SplineScaleOnInstancesMask</code> <code>FPurplePlacerVectorBitMask</code> Apply spline scale to instances <code>CustomSplineScales</code>, <code>CustomSplineDefaultScale</code> <code>TArray&lt;FVector&gt;</code> / <code>FVector</code> Manual scale overrides <code>bUseCustomSplineScaleOnActors</code>, <code>bUseCustomSplineDefaultScaleValue</code> <code>bool</code> Flags for spline actor scale <code>bInstanceScaleUniform</code> <code>bool</code> If true, scale uniformly (X only) <code>InstanceScaleUniformAxis</code> <code>EPurplePlacerCoreGenericAxis</code> Axis for uniform scale <code>bUseSplineScaleAsRadius</code> <code>bool</code> Use scale to define placement radius <code>SplineRadiusXMultiplier</code>, <code>SplineRadiusYMultiplier</code> <code>float</code> Extra spline radius multiplier <code>CustomSplineRadiusX</code>, <code>CustomSplineRadiusY</code> <code>float</code> Manual radius override <code>SplineRadiusXBias</code>, <code>SplineRadiusYBias</code> <code>FPurplePlacerFloatRangeBound</code> Radius distribution bias <code>SplineDepthOffset</code> <code>FPurplePlacerFloatRange</code> Depth offset range"},{"location":"purpleprint/placer/smart/smart-spline.html#general-transform","title":"General Transform","text":"<p>Inside Area|Transform.  </p> Property Description <code>ActorTransform</code> Global transform of the actor. <code>ActorOrigin</code> Relative origin offset. <code>ActorExtend</code> Calculated bounding box size."},{"location":"purpleprint/placer/smart/smart-spline.html#randomized-transform","title":"Randomized Transform","text":"<p>Inside Area|Transform|Random.  </p> Property Description <code>RandomLocation</code>, <code>RandomRotation</code>, <code>RandomScale</code> FBox ranges for randomization. <code>bUseLocationList</code>, <code>bUseRotationList</code>, <code>bUseScaleList</code> Enables list-based override. <code>LocationList</code>, <code>RotationList</code>, <code>ScaleList</code> Predefined values for deterministic transform input. <code>bRandomScaleUniform</code> Forces uniform scaling when using random."},{"location":"purpleprint/placer/smart/smart-spline.html#grid-offsets","title":"Grid Offsets","text":"<p>Used when <code>ArrayType = Grid</code> or X used globally for the rest of types. Inside Area|Transform|Offset.  </p> Property Description <code>OffsetX/Y/Z</code> Arrays of <code>FTransform</code> applied along respective axis. <code>bOffsetLoopX/Y/Z</code> Enables wrap-around looping of offsets. <code>bOffsetLoopLockX/Y/Z</code> Restricts looping to only that axis. <code>OffsetAccumulativeX/Y/Z</code> Bitmask control to enable cumulative offset per iteration."},{"location":"purpleprint/placer/smart/smart-spline.html#utility-functions","title":"Utility Functions","text":"Function Description <code>Bake()</code> / <code>UnBake()</code> Finalize or reset the placement setup <code>Update()</code> / <code>Refresh()</code> Regenerates internal data <code>ClearAllInstances()</code> Deletes all runtime instances <code>ReplaceInstancesDataWithDefaultInstanceData()</code> Resets to default configuration <code>GetAllDynamicInstances()</code> / <code>GetAllStaticInstances()</code> Returns array of instance structs <code>ComponentsToActors()</code> / <code>ActorsToStaticInstancesList()</code> Conversion tools <code>ParseDataNiagara()</code> Parses transform data from Niagara particles"},{"location":"purpleprint/placer/smart/smart-spline.html#editor-overrides","title":"Editor Overrides","text":"Function Description <code>PostEditChangeProperty()</code> Responds to property changes in editor <code>Tick()</code> Called every frame <code>OnConstruction()</code> Called on actor placement <code>BeginPlay()</code>, <code>EndPlay()</code> Runtime initialization and cleanup"},{"location":"purpleprint/placer/smart/smart-spline.html#main-components-features","title":"Main Components &amp; Features","text":""},{"location":"purpleprint/placer/smart/smart-spline.html#area-configuration","title":"Area Configuration","text":"<ul> <li><code>SplineType</code>: Defines the placement strategy (<code>Box</code>, <code>Grid</code>, <code>Scatter</code>, <code>Manual</code>, etc.).</li> <li><code>Num</code>, <code>SubNum</code>: Controls the number of main and child instances.</li> </ul>"},{"location":"purpleprint/placer/smart/smart-spline.html#randomization-controls","title":"Randomization Controls","text":"<ul> <li><code>RandomLocation</code>, <code>RandomRotation</code>, <code>RandomScale</code>: Controls randomized positioning.</li> <li><code>bUseLocationList</code>, <code>bUseRotationList</code>, <code>bUseScaleList</code>: Allows switching between list-based or pure random generation.</li> <li><code>LocationList</code>, <code>RotationList</code>, <code>ScaleList</code>: Lists for controlled random transforms.</li> </ul>"},{"location":"purpleprint/placer/smart/smart-spline.html#transform-offset-customization","title":"Transform &amp; Offset Customization","text":"<p>The actor provides several properties under the <code>Transform</code> category:</p> <ul> <li><code>ActorTransform</code>, <code>ActorOrigin</code>, <code>ActorExtend</code>: Defines the actor\u2019s spatial properties.</li> </ul> <p>These parameters allow fine-grained control over placement in each axis when working with grid-type distributions.</p> <ul> <li>Axis-specific offset transforms (<code>GridOffsetX</code>, <code>GridOffsetY</code>, <code>GridOffsetZ</code>): Fine control over instance position in a grid.</li> <li><code>GridOffsetLoopX/Y/Z</code>, <code>GridOffsetAccumulativeX/Y/Z</code>: Looping and accumulation options for offsets. If enabled, loops through the offsets even if the number of instances exceeds the array size.</li> <li><code>bGridOffsetLoopLockX/Y/Z</code>: Locks looping to just the specific axis. Useful for keeping consistent transformations in multi-axis layouts.</li> <li><code>FPurplePlacerTransformBitMask</code> used to accumulate offsets per instance in a specific axis.</li> </ul> <p>These control whether each offset is added cumulatively (stacked) or used in isolation.</p>"},{"location":"purpleprint/placer/smart/smart-spline.html#instance-placement-logic","title":"Instance Placement Logic","text":""},{"location":"purpleprint/placer/smart/smart-spline.html#dynamic-instances","title":"Dynamic Instances","text":"<p>Functions and flags related to procedural placement:</p> <ul> <li><code>ConstructDynamicInstances_Implementation(...)</code></li> <li><code>TransformDynamicInstances_Implementation(...)</code></li> <li><code>BuildDynamicInstances_Implementation(...)</code></li> </ul>"},{"location":"purpleprint/placer/smart/smart-spline.html#utility-editor-functions","title":"Utility &amp; Editor Functions","text":"<ul> <li><code>Bake()</code>, <code>UnBake()</code>: Prepare or clear instance placements.</li> <li><code>Refresh()</code>, <code>Update()</code>: Used to regenerate or force rebuild of placement logic.</li> <li><code>ClearAllInstances()</code>: Removes all placed instances.</li> <li><code>GetAllStaticInstances()</code>, <code>GetAllDynamicInstances()</code>: Retrieve instance data.</li> <li><code>ReplaceInstancesDataWithDefaultInstanceData(...)</code>: Utility for resetting instance data.</li> </ul>"},{"location":"purpleprint/placer/smart/smart-spline.html#data-asset-integration","title":"Data Asset Integration","text":"<ul> <li><code>bUseDataAsset</code>: If true, uses external asset definitions.</li> <li><code>DataAsset</code>: Source asset that includes instance definitions.</li> <li><code>GenerateInstancesFromAssets()</code>: Populates instance data from asset.</li> </ul>"},{"location":"purpleprint/placer/smart/smart-spline.html#editor-only-debug-tools","title":"Editor-Only &amp; Debug Tools","text":"<ul> <li><code>PostEditChangeProperty(...)</code>: Used in editor to respond to property changes.</li> <li><code>bShowArea</code>: Toggles wireframe visibility.</li> <li><code>ManualTransformsCache</code>, <code>ArrayTypeCache</code>: Cached data for editor rebuilds.</li> </ul>"},{"location":"purpleprint/placer/smart/smart-spline.html#additional-notes","title":"Additional Notes","text":"<ul> <li>This actor class is part of Purpleprint - Placer by Hevedy.</li> <li>Designed to support procedural workflows with maximum flexibility in editor.</li> </ul>"}]}